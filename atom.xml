<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>刘心怡</title>
  
  <subtitle>Tomorrow will be better than today!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2023-09-15T06:01:23.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>刘心怡</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>网络编程</title>
    <link href="http://yoursite.com/2023/09/15/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/2023/09/15/网络编程/</id>
    <published>2023-09-15T06:01:23.000Z</published>
    <updated>2023-09-15T06:01:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>网络编程<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网络编程&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="其他" scheme="http://yoursite.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>Django</title>
    <link href="http://yoursite.com/2022/08/22/Django/"/>
    <id>http://yoursite.com/2022/08/22/Django/</id>
    <published>2022-08-22T07:51:00.000Z</published>
    <updated>2022-08-22T07:51:00.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="python" scheme="http://yoursite.com/categories/Python/python/"/>
    
      <category term="Django" scheme="http://yoursite.com/categories/Python/python/Django/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>编程范式</title>
    <link href="http://yoursite.com/2022/07/25/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/"/>
    <id>http://yoursite.com/2022/07/25/编程范式/</id>
    <published>2022-07-25T07:02:00.000Z</published>
    <updated>2022-07-25T07:02:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>编程范式：指的是编程世界里的各种流派，有：面向过程、函数式、面向对象等。</p><p><img src="/2022/07/25/编程范式/编程范式-20220816-10-28-19.png" alt="概览"></p><a id="more"></a><h2 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h2><p>面向过程“核心是“过程”二字，“过程”指的是解决问题的步骤。详细的，若程序一开始是要着手解决一个大的问题，按照过程式的思路就是把这个大的问题分解成很多个小问题或子过程去实现，然后依次调用即可，这极大地降低了程序的复杂度。</p><ul><li>优点：将复杂的问题流程化，进而简单化</li><li>缺点：程序的可扩展性极差，因为一套流水线或者流程就是用来解决一个问题，改一个组件，与其相关的组件可能都需要修改，比如我们修改了cloud_upload的逻辑，那么依赖其结果才能正常执行的data_backup_check也需要修改，这就造成了连锁反应，而且这一问题会随着程序规模的增大而变得越发的糟糕</li><li>应用场景：一般用于那些功能一旦实现之后就很少需要改变的场景， 如果你只是写一些简单的脚本，去做一些一次性任务，用面向过程去实现是极好的，但如果你要处理的任务是复杂的，且需要不断迭代和维护， 那还是用面向对象最为方便。</li></ul><h2 id="函数式"><a href="#函数式" class="headerlink" title="函数式"></a>函数式</h2><p>函数式编程并非用函数编程这么简单，而是将计算机的运算视为数学意义上的运算，比起面向过程，函数式更加注重的是执行结果而非执行的过程，代表语言有：Haskell、Erlang。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;编程范式：指的是编程世界里的各种流派，有：面向过程、函数式、面向对象等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/07/25/编程范式/编程范式-20220816-10-28-19.png&quot; alt=&quot;概览&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="其他" scheme="http://yoursite.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>计算机基础</title>
    <link href="http://yoursite.com/2022/06/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2022/06/30/计算机基础/</id>
    <published>2022-06-30T06:33:00.000Z</published>
    <updated>2022-07-22T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>计算机基础科普扫盲</p><p><img src="/2022/06/30/计算机基础/计算机基础-20220816-09-15-29.png" alt="计算机核心"><br><a id="more"></a></p><h2 id="计算机体系的三层结构"><a href="#计算机体系的三层结构" class="headerlink" title="计算机体系的三层结构"></a>计算机体系的三层结构</h2><p>我们开发应用程序本质是在控制硬件，但是我们直接打交道的是操作系统，应用程序都是通过操作系统来间接地操作硬件的</p><p><img src="/2022/06/30/计算机基础/计算机基础-20220630-15-27-37.png" alt="计算机体系的三层结构"></p><h3 id="计算机硬件"><a href="#计算机硬件" class="headerlink" title="计算机硬件"></a>计算机硬件</h3><ul><li>cpu存取的数据和指令都来自于内存</li><li>内存称之为主存,主存储器内的数据则是从输入单元所传输进来！而CPU处理完毕的数据也必须先写回主存储器中，最后数据才从主存储器传输到输出单元。</li></ul><h4 id="cpu相关"><a href="#cpu相关" class="headerlink" title="cpu相关"></a>cpu相关</h4><p>cpu：控制器+运算器<br>控制器：计算机的指挥系统，负责控制计算机所有其他组件如何工作的<br>运算器：运算包括数学运算与逻辑运算<br>寄存器：cpu访问内存以得到指令或数据的时间比cpu执行指令花费的时间要长得多，所以，所有CPU内部都有一些用来保存关键变量和临时数据的寄存器，与cpu相同材质制造，与cpu一样快，因而cpu访问它无时延</p><ul><li>指令集，在超大规模集成电路构成的微型计算机中，往往将CPU制成一块具有特定功能的芯片，称为微处理器，芯片里边有编写好的微指令集,我们在主机上的所有操作或者说任何软件的执行最终都要转化成cpu的指令去执行,如输入输出，阅读，视频，上网等这些都要参考CPU是否内置有相关微指令集才行。如果没有那么CPU无法处理这些操作。</li><li>x86-64<ul><li>x86，是针对cpu的型号或者说架构的一种统称，详细地讲，最早的那颗Intel发明出来的CPU代号称为8086，后来在8086的基础上又开发出了80285、80386….，因此这种架构的CPU就被统称为x86架构了。由于AMD、Intel、VIA所开发出来的x86架构CPU被大量使用于个人计算机上面，因此，个人计算机常被称为x86架构的计算机！程序员开发出的软件最终都要翻译成cpu的指令集才能运行，因此软件的版本必须与cpu的架构契合。软件名字中有x86，这其实就是告诉我们：该软件应该运行在x86架构的计算机上。</li><li>64位，<strong>cpu的位数指的是cpu一次性能从内存中取出多少位二进制指令</strong>，64bit指的是一次性能从内存中取出64位二进制指令。<strong>cpu具有向下兼容性</strong>，指的是64位的cpu既可以运行64位的软件，也可以运行32位的软件，而32位的cpu只能运行32位的软件。</li></ul></li></ul><h5 id="内核态与用户态"><a href="#内核态与用户态" class="headerlink" title="内核态与用户态"></a>内核态与用户态</h5><p>代表cpu的两种工作状态</p><ul><li>内核态：运行的程序是操作系统，可以操作计算机硬件</li><li>用户态：运行的程序是应用程序，不能操作计算机硬件</li></ul><blockquote><p>内核态与用户态的转换，应用程序的运行必然涉及到计算机硬件的操作，那就必须有用户态切换到内核态下才能实现，所以计算机工作时在频繁发生内核态与用户态的转换</p></blockquote><h5 id="多线程与多核芯片"><a href="#多线程与多核芯片" class="headerlink" title="多线程与多核芯片"></a>多线程与多核芯片</h5><p>2核4线程（假4核）：2核代表有两个cpu，4线程指的是每个cpu都有两个线程<br>4核8线程（假8核）：4核代表有4个cpu，8线程指的是每个cpu都有两个线程</p><blockquote><p>进程是资源单位而线程才是cpu的执行单位。多线程运行cpu保持两个不同的线程状态，可以在纳秒级的时间内来回切换，速度快到你看到的结果是并发的，伪并行的，然而多线程不提供真正的并行处理，一个cpu同一时刻只能处理一个进程（一个进程中至少一个线程）</p></blockquote><h4 id="存储器相关"><a href="#存储器相关" class="headerlink" title="存储器相关"></a>存储器相关</h4><p>计算机的记忆功能，负责数据的存取，分类如下</p><ul><li>内存(主存)（基于电工作）：存取数据都快，断电数据丢失，只能临时存取数据<ul><li>RAM：内存</li><li>ROM：“只读内存”，存放计算机厂商写死计算机上的一段核心程序(BIOS)</li><li>CMOS：存取速度慢，断电数据丢失，耗电量极低</li></ul></li><li>外存（固态硬盘，机械硬盘：基于磁工作，磁带）：存取速度都慢，断电数据也不丢，可以永久保存数据<ul><li>磁带（常见于大型数据库系统中）：在价钱相同的情况下比硬盘拥有更高的存储容量，虽然速度低于磁盘，但是因其大容量，在地震水灾火灾时可移动性强等特性，<strong>常被用来做备份</strong>。</li><li>机械硬盘相关如下<ul><li>磁道：一圈数据，对应着一串二进制（1bit代表一个二进制位）8bit比特位=1Bytes字节，1024Bytes=1KB</li><li>扇区：一个扇区通常为512Bytes，站在硬盘的解读，一次性读写数据的最小单为为扇区</li><li>柱面<br><img src="/2022/06/30/计算机基础/计算机基础-20220630-17-11-54.png" alt="机械硬盘机构图1"><br><img src="/2022/06/30/计算机基础/计算机基础-20220630-17-12-32.png" alt="机械硬盘机构图2"><br><img src="/2022/06/30/计算机基础/计算机基础-20220630-17-12-52.png" alt="机械硬盘机构图3"><br><img src="/2022/06/30/计算机基础/计算机基础-20220630-17-14-05.png" alt="机械硬盘机构图4"></li></ul></li></ul></li></ul><blockquote><ul><li><strong>机械硬盘的IO延迟：平均寻道时间+平均延迟时间</strong><ul><li>平均寻道时间：机械手臂转到数据所在磁道需要花费的时间，受限于物理工艺水平，目前机械硬盘可以达到的是5ms</li><li>平均延迟时间：转半圈需要花费4ms，受限于硬盘的转速</li></ul></li><li><strong>优化程序运行效率的一个核心法则：能从内存取数据，就不要从硬盘取</strong></li></ul></blockquote><h5 id="虚拟内存机制"><a href="#虚拟内存机制" class="headerlink" title="虚拟内存机制"></a>虚拟内存机制</h5><ul><li>虚拟内存机制，是指将正在使用的程序放入内存去执行，而暂时不需要执行的程序放到磁盘的某块地方，这块地方成为虚拟内存。</li><li>虚拟内存机制的核心，在于快速地映射内存地址，由cpu中的一个部件负责——存储器管理单元(Memory Management Unit MMU)。</li><li>许多计算机支持虚拟内存机制，使计算机可以运行大于物理内存的程序，在linux中称为swap，</li></ul><blockquote><p>从一个程序切换到另外一个程序，称为上下文切换(context switch)，缓存和MMU的出现提升了系统的性能，尤其是上下文切换</p></blockquote><h4 id="I-O设备"><a href="#I-O设备" class="headerlink" title="I/O设备"></a>I/O设备</h4><p>I/O设备:设备本身+设备的控制器（主板上的一块芯片或一组芯片）</p><ul><li>输入设备input：如键盘、鼠标</li><li>输出设备output：显示器、打印机</li></ul><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><p>操作系统是一个协调、管理、控制计算机硬件资源与应用软件资源的一个控制程序，作用：</p><ul><li>控制计算机硬件的基本运行</li><li>把使用硬件的复杂操作封装成简单的功能，给上层的应用程序使用</li></ul><blockquote><p>操作系统一次性读写的单位是一个block块（一般默认设置为8扇区的大小=4096Bytes)，<strong>优化操作系统可以考虑修改block块的大小设置</strong></p></blockquote><h4 id="操作系统启动流程"><a href="#操作系统启动流程" class="headerlink" title="操作系统启动流程"></a>操作系统启动流程</h4><ol><li>计算机加电</li><li>BIOS开始运行，检测硬件：cpu、内存、硬盘等</li><li>BIOS读取CMOS存储器中的参数，选择启动设备</li><li>从启动设备上读取第一个扇区的内容（MBR主引导记录512字节，前446为引导信息，后64为分区信息，最后两个为标志位）</li><li>根据分区信息读入bootloader启动装载模块，启动操作系统</li><li>然后操作系统询问BIOS，以获得配置信息。对于每种设备，系统会检查其设备驱动程序是否存在，如果没有，系统则会要求用户按照设备驱动程序。一旦有了全部的设备驱动程序，操作系统就将它们调入内核。然后初始有关的表格（如进程表），穿件需要的进程，并在每个终端上启动登录程序或GUI</li></ol><blockquote><p>BIOS(Basic Input Output System)，被写入ROM设备<br>裸机：CPU+ROM(充当内存，存放BIOS系统)+CMOS(充当硬盘)</p></blockquote><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><p><strong>文件是操作系统提供给应用程序来操作硬盘的虚拟概念</strong>，用户或应用程序对文件的操作，就是向操作系统发起调用，然后由操作系统完成对硬盘的具体操作。</p><h3 id="应用程序"><a href="#应用程序" class="headerlink" title="应用程序"></a>应用程序</h3><ul><li>应用程序分为两种<ul><li>应用软件：应用程序相关逻辑</li><li>系统软件：控制底层硬件的</li></ul></li></ul><h4 id="应用程序的启动流程"><a href="#应用程序的启动流程" class="headerlink" title="应用程序的启动流程"></a>应用程序的启动流程</h4><ul><li>双击exe快捷方式(即告诉操作系统应用程序的文件路径)</li><li>操作系统根据文件路径找到程序在硬盘的位置，控制其代码从硬盘加载到内存</li><li>然后控制cpu从内存中读取刚刚读入内存的应用程序的代码，执行指令</li><li>应用程序完成启动</li></ul><h2 id="平台与跨平台"><a href="#平台与跨平台" class="headerlink" title="平台与跨平台"></a>平台与跨平台</h2><ul><li>平台：计算机硬件+操作系统</li><li>软件的跨平台性指的是：一款软件可以任意平台上运行，是衡量软件质量高低的一个非常重要的指标</li></ul><h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><ul><li>ASCII<ul><li>只有英文字符与数字的一一对应关系</li><li>一个英文字符对应1Bytes，1Bytes=8bit，8bit最多包含256个数字，可以对应256个字符，足够表示所有英文字符</li></ul></li><li>GBK<ul><li>只有中文字符、英文字符与数字的一一对应关系</li><li>一个英文字符对应1Bytes</li><li>一个中文字符对应2Bytes</li></ul></li><li>unicode<ul><li>兼容万国字符，与万国字符都有对应关系</li><li>内存中是unicode编码的</li><li>一个字符对应2Bytes，中文中个别生僻会采用4Bytes、8Bytes</li><li>unicode更像是一个过渡版本，用于兼容其他非utf-8的老编码存储数据</li></ul></li><li>utf-8: unicode的转换格式，unicode固定使用两个字节来存储一个字符，所以存放英文字符时，unicode格式会额外占用一倍空间，传输时也会额外耗费一倍的时间，所以unicode二进制写入硬盘或者基于网络传输时转化为更精简的格式，即utf-8<ul><li>一个英文字符对应1Bytes</li><li>一个中文字符对应3Bytes</li></ul></li><li>其他<ul><li>Shift_JIS：只有日文字符、英文字符与数字的一一对应关系</li><li>Euc-kr：只有韩文字符、英文字符与数字的一一对应关系</li></ul></li></ul><h3 id="解码和编码"><a href="#解码和编码" class="headerlink" title="解码和编码"></a>解码和编码</h3><ul><li>内存中的unicode转换成字符，以及由unicode转换成其他编码的过程，都称为编码encode</li><li>由字符转换成内存中的unicode，以及由其他编码转换成unicode的过程，都称为解码decode</li></ul><blockquote><ul><li>内存固定使用unicode，我们可以改变的是存入硬盘采用格式</li><li>老的字符编码都可以转换成unicode，但是不能通过unicode互转</li><li>由内存写入硬盘时，必须将编码格式设置为支持所输入字符的编码格式</li><li>由硬盘读入内存时，必须采用与写入硬盘时相同的编码格式</li></ul></blockquote><pre><code>内存</code></pre><p>  人类的字符———unicode格式的数字———-<br>                        |                     |<br>                        |                     |<br>                        |<br>                      硬盘                    |<br>                        |<br>                        |                     |<br>                        |                     |<br>                  GBK格式的二进制       Shift-JIS格式的二进制</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;计算机基础科普扫盲&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/06/30/计算机基础/计算机基础-20220816-09-15-29.png&quot; alt=&quot;计算机核心&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="其他" scheme="http://yoursite.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>vue3</title>
    <link href="http://yoursite.com/2022/02/21/vue3/"/>
    <id>http://yoursite.com/2022/02/21/vue3/</id>
    <published>2022-02-21T02:34:00.000Z</published>
    <updated>2022-10-22T05:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>vue3采用typescript开发，对ts支持有好</li><li>源码体积优化，移除部分api，使用tree-shaking</li><li>数据劫持优化，vue3采用proxy，性能提高</li><li>编译优化，vue3实现静态模板分析，重写diff算法</li><li>CompositionApi，整合业务代码逻辑，提取公共逻辑（vue2采用mixin）</li><li>自定义渲染器，改写vue底层渲染逻辑</li><li>新增Fragment、Teleport、Suspense组件</li></ul><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;vue3采用typescript开发，对ts支持有好&lt;/li&gt;
&lt;li&gt;源码体积优化，移除部分api，使用tree-shaking&lt;/li&gt;
&lt;li&gt;数据劫持优化，vue3采用proxy，性能提高&lt;/li&gt;
&lt;li&gt;编译优化，vue3实现静态模板分析，重写diff算法&lt;/li&gt;
&lt;li&gt;CompositionApi，整合业务代码逻辑，提取公共逻辑（vue2采用mixin）&lt;/li&gt;
&lt;li&gt;自定义渲染器，改写vue底层渲染逻辑&lt;/li&gt;
&lt;li&gt;新增Fragment、Teleport、Suspense组件&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
      <category term="vue" scheme="http://yoursite.com/categories/JavaScript/vue/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>9种常见跨域手段</title>
    <link href="http://yoursite.com/2022/02/13/9%E7%A7%8D%E5%B8%B8%E8%A7%81%E8%B7%A8%E5%9F%9F%E6%89%8B%E6%AE%B5/"/>
    <id>http://yoursite.com/2022/02/13/9种常见跨域手段/</id>
    <published>2022-02-13T06:00:00.000Z</published>
    <updated>2022-02-14T06:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">&#123;url,params,cb&#125;</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">     <span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">     <span class="built_in">window</span>[cb] = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">       resolve(data);</span><br><span class="line">       <span class="built_in">document</span>.body.removeChild(script);</span><br><span class="line">     &#125;</span><br><span class="line">     params = &#123;...params,cb&#125; <span class="comment">// wd=b&amp;cb=show</span></span><br><span class="line">     <span class="keyword">let</span> arrs = [];</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> params)&#123;</span><br><span class="line">       arrs.push(<span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;params[key]&#125;</span>`</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     script.src = <span class="string">`<span class="subst">$&#123;url&#125;</span>?<span class="subst">$&#123;arrs.join(<span class="string">'&amp;'</span>)&#125;</span>`</span>;</span><br><span class="line">     <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 只能发送get请求 不支持post put delete</span></span><br><span class="line"> <span class="comment">// 不安全 xss攻击  不采用</span></span><br><span class="line"> jsonp(&#123;</span><br><span class="line">   url: <span class="string">'http://localhost:3000/say'</span>,</span><br><span class="line">   params:&#123;<span class="attr">wd</span>:<span class="string">'hello'</span>&#125;,</span><br><span class="line">   cb:<span class="string">'show'</span></span><br><span class="line"> &#125;).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(data);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><h3 id="cors-后台配置允许"><a href="#cors-后台配置允许" class="headerlink" title="cors 后台配置允许"></a>cors 后台配置允许</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line"><span class="keyword">let</span> whitList = [<span class="string">'http://localhost:3000'</span>]</span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">req,res,next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> origin = req.headers.origin;</span><br><span class="line">  <span class="keyword">if</span>(whitList.includes(origin))&#123;</span><br><span class="line">    <span class="comment">// 设置哪个源可以访问</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Origin'</span>, origin);</span><br><span class="line">    <span class="comment">// 允许携带哪个头访问</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Headers'</span>,<span class="string">'name'</span>);</span><br><span class="line">    <span class="comment">// 允许哪个方法访问</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Methods'</span>,<span class="string">'PUT'</span>);</span><br><span class="line">    <span class="comment">// 允许携带cookie</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Credentials'</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="comment">// 预检的存活时间</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Max-Age'</span>,<span class="number">6</span>);</span><br><span class="line">    <span class="comment">// 允许返回的头</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Expose-Headers'</span>, <span class="string">'name'</span>);</span><br><span class="line">    <span class="keyword">if</span>(req.method === <span class="string">'OPTIONS'</span>)&#123;</span><br><span class="line">      res.end(); <span class="comment">// OPTIONS请求不做任何处理</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="postMessage-页面间跨域通信"><a href="#postMessage-页面间跨域通信" class="headerlink" title="postMessage 页面间跨域通信"></a>postMessage 页面间跨域通信</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- http://localhost:3000/a.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"http://localhost:4000/b.html"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">id</span>=<span class="string">"frame"</span> <span class="attr">onload</span>=<span class="string">"load()"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> frame = <span class="built_in">document</span>.getElementById(<span class="string">'frame'</span>);</span></span><br><span class="line"><span class="javascript">    frame.contentWindow.postMessage(<span class="string">'hello'</span>,<span class="string">'http://localhost:4000'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(e.data);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- http://localhost:4000/b.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(e.data);</span></span><br><span class="line"><span class="javascript">    e.source.postMessage(<span class="string">'hi'</span>,e.origin)</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="window-name"><a href="#window-name" class="headerlink" title="window.name"></a>window.name</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- http://localhost:3000/a.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"http://localhost:4000/c.html"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">onload</span>=<span class="string">"load()"</span> <span class="attr">id</span>=<span class="string">"iframe"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> first = <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span>(first)&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">'iframe'</span>);</span></span><br><span class="line"><span class="javascript">      iframe.src = <span class="string">'http://localhost:3000/b.html'</span>;</span></span><br><span class="line"><span class="javascript">      first = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 获取c的window.name</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(iframe.contentWindow.name);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- http://localhost:3000/b.html a和b是同域的 无内容--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- http://localhost:4000/c.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.name = <span class="string">'我不爱你'</span>  </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- http://localhost:3000/a.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"http://localhost:4000/c.html#iloveyou"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.onhashchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(location.hash);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- http://localhost:3000/b.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.parent.parent.location.hash = location.hash  </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- http://localhost:4000/c.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(location.hash);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span></span><br><span class="line"><span class="javascript">  iframe.src = <span class="string">'http://localhost:3000/b.html#idontloveyou'</span>;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.body.appendChild(iframe);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="document-domain-父子域通信"><a href="#document-domain-父子域通信" class="headerlink" title="document.domain 父子域通信"></a>document.domain 父子域通信</h3><p>document.domain 的值设置为其当前域或其当前域的父域。如果将其设置为其当前域的父域，则这个父域将用于后续源检查</p><blockquote><p>端口号是由浏览器另行检查的。任何对document.domain的赋值操作，包括 document.domain = document.domain 都会导致端口号被重写为 null 。因此使用 document.domain 来允许子域安全访问其父域时，需要在父域和子域中都进行赋值，即使这样做只是将父域设置回其原始值，但这是必要的，以确保端口号都为 null 。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 域名 一级域名二级域名 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- http://a.zf1.cn:3000/a.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"http://b.zf1.cn:3000/b.html"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">onload</span>=<span class="string">"load()"</span> <span class="attr">id</span>=<span class="string">"frame"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.domain = <span class="string">'zf1.cn'</span></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(frame.contentWindow.a);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- http://b.zf1.cn:3000/b.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.domain = <span class="string">'zf1.cn'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> a = <span class="number">100</span>;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li><p>http-proxy</p></li><li><p>nginx</p></li><li><p>websocket</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;jsonp&quot;&gt;&lt;a href=&quot;#jsonp&quot; class=&quot;headerlink&quot; title=&quot;jsonp&quot;&gt;&lt;/a&gt;jsonp&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
      <category term="http" scheme="http://yoursite.com/categories/http/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
      <category term="ES" scheme="http://yoursite.com/tags/ES/"/>
    
  </entry>
  
  <entry>
    <title>Promise原理</title>
    <link href="http://yoursite.com/2019/09/11/Promise%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2019/09/11/Promise原理/</id>
    <published>2019-09-11T05:23:00.000Z</published>
    <updated>2019-09-11T09:43:00.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
      <category term="ES" scheme="http://yoursite.com/categories/JavaScript/ES/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="ES" scheme="http://yoursite.com/tags/ES/"/>
    
  </entry>
  
  <entry>
    <title>前端设计模式.md</title>
    <link href="http://yoursite.com/2019/08/28/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/28/前端设计模式/</id>
    <published>2019-08-28T03:32:00.000Z</published>
    <updated>2019-08-28T03:32:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>23种设计模式<br><a id="more"></a></p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>把客观对象抽象成属性数据和对数据的相关操作，把内部细节和不想关的信息隐藏起来；把同一个类型的客观对象的属性数据和操作绑定在一起，封装成类，并且允许分成不同层次进行抽象，通过继承实现属性和操作的共享。</p><p>面向对象开发计划</p><ul><li>面向对象的分析 OOA</li><li>面向对象的设计 OOD</li><li>面向对象的编程 OOP</li></ul><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>把数据封装起来，不该外部访问的不要让外部访问，减少耦合，利于数据的接口权限管理</p><blockquote><p>ES6 目前不支持，一般认为<code>_</code>开头的都是私有的，不要使用</p></blockquote><p>typescript修饰符实现</p><ul><li><code>public</code>：修饰公有的属性或者行为，可以在类内或者类外使用，是默认的修饰符</li><li><code>protected</code>：修饰受保护的属性或者行为，可以在本类内和子类中使用</li><li><code>private</code>：修饰私有的属性或者行为，只可以在本类内使用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    public name;</span><br><span class="line">    protected age;</span><br><span class="line">    private weight;</span><br><span class="line">    <span class="keyword">constructor</span>(name,age,weight) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">        <span class="keyword">this</span>.age=age;</span><br><span class="line">        <span class="keyword">this</span>.weight=weight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    private money;</span><br><span class="line">    <span class="keyword">constructor</span>(name,age,weight,money) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name,age,weight);</span><br><span class="line">        <span class="keyword">this</span>.money=money;</span><br><span class="line">    &#125;</span><br><span class="line">    getName() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);<span class="comment">// hello</span></span><br><span class="line">    &#125;</span><br><span class="line">    getAge() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);<span class="comment">// 1</span></span><br><span class="line">    &#125;</span><br><span class="line">    getWeight() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.weight);<span class="comment">// undefined</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p=<span class="keyword">new</span> Person(<span class="string">'hello'</span>,<span class="number">1</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p.name);<span class="comment">// hello</span></span><br><span class="line"><span class="built_in">console</span>.log(p.age);<span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(p.weight);<span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>子类继承父类，父类是公共的。</p><p>将公共方法抽离到父类中，可以提高复用，减少冗余</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//把同一个类型的客观对象的属性数据和操作绑定在一起，封装成类Animal</span></span><br><span class="line"><span class="comment">// 分成Animal和Dog不同层次进行抽象，通过继承实现属性和操作的共享</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">  &#125;</span><br><span class="line">  eat()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> eat`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> animal=<span class="keyword">new</span> Animal(<span class="string">'动物'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name,age)&#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">    <span class="keyword">this</span>.age=age;</span><br><span class="line">  &#125;</span><br><span class="line">  bark()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> is barking!`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> dog=<span class="keyword">new</span> Dog(<span class="string">'dog'</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>面向接口编程</p><p>同一个接口可以有不同实现，保持子类的开放性和灵活性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,age,weight) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">        <span class="keyword">this</span>.age=age;</span><br><span class="line">        <span class="keyword">this</span>.weight=weight;</span><br><span class="line">    &#125;</span><br><span class="line">    speak() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,age,weight,money) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name,age,weight);</span><br><span class="line">        <span class="keyword">this</span>.money=money;</span><br><span class="line">    &#125;</span><br><span class="line">    speak() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'你好!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,age,weight) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name,age,weight);</span><br><span class="line">    &#125;</span><br><span class="line">    speak() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'汪汪汪!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五大设计原则（SOLID）"><a href="#五大设计原则（SOLID）" class="headerlink" title="五大设计原则（SOLID）"></a>五大设计原则（SOLID）</h2><p>SOLID设计原则</p><ul><li>S：单一职责原则(Single responsibility principle)，对象应该仅具有一种单一功能，如果功能特别复杂就进行拆分</li><li><p>O：开放封闭原则(Open Closed Principle)，对扩展开放，对修改关闭，增加需求时，扩展新代码，而非修改已有代码，这是软件设计的终极目标</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseJSON</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> response.json();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkStatus</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (response.status &gt;= <span class="number">200</span> &amp;&amp; response.status &lt; <span class="number">300</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> error = <span class="keyword">new</span> <span class="built_in">Error</span>(response.statusText);</span><br><span class="line">error.response = response;</span><br><span class="line"><span class="keyword">throw</span> error;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">url, options</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> fetch(url, options)</span><br><span class="line">    .then(checkStatus)</span><br><span class="line">    .then(parseJSON)</span><br><span class="line">    .then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;data&#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> (&#123; err &#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>L：里氏替换原则(Liskov Substitution Principle)，子类能覆盖父类，父类能出现的地方子类就能出现</p></li><li>I：接口隔离原则(Interface Segregation Principle)，保持接口的单一独立，避免出现胖接口，类似于单一职责原则，更关注接口</li><li>D：依赖倒置原则(Dependence Inversion Principle)，面向接口编程，依赖于抽象而不依赖于具体实现，使用方只关注接口而不关注具体类的实现</li></ul><h2 id="23种设计模式"><a href="#23种设计模式" class="headerlink" title="23种设计模式"></a>23种设计模式</h2><h3 id="创建型"><a href="#创建型" class="headerlink" title="创建型"></a>创建型</h3><h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><h5 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h5><h5 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h5><h5 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h5><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><h4 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h4><h4 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h4><h3 id="结构型"><a href="#结构型" class="headerlink" title="结构型"></a>结构型</h3><h4 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h4><h4 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h4><h4 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h4><h4 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h4><h4 id="巧接模式"><a href="#巧接模式" class="headerlink" title="巧接模式"></a>巧接模式</h4><h4 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h4><h4 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h4><h3 id="行为型"><a href="#行为型" class="headerlink" title="行为型"></a>行为型</h3><h4 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h4><h4 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h4><h4 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h4><h4 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h4><h4 id="模版方法模式"><a href="#模版方法模式" class="headerlink" title="模版方法模式"></a>模版方法模式</h4><h4 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h4><h4 id="职责链模式"><a href="#职责链模式" class="headerlink" title="职责链模式"></a>职责链模式</h4><h4 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h4><h4 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h4><h4 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h4><h4 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;23种设计模式&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
      <category term="ES" scheme="http://yoursite.com/categories/JavaScript/ES/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="ES" scheme="http://yoursite.com/tags/ES/"/>
    
  </entry>
  
  <entry>
    <title>高阶函数</title>
    <link href="http://yoursite.com/2019/08/16/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2019/08/16/高阶函数/</id>
    <published>2019-08-16T01:35:00.000Z</published>
    <updated>2019-08-28T02:41:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>高阶函数：参数是函数 或 返回值是函数的函数<br><a id="more"></a></p><p>js的核心是回调</p><h2 id="before和after"><a href="#before和after" class="headerlink" title="before和after"></a>before和after</h2><p>AOP（面向切面编程），把核心抽离出来，在核心基础上增加功能</p><h3 id="before"><a href="#before" class="headerlink" title="before"></a>before</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.before=<span class="function"><span class="keyword">function</span>(<span class="params">beforeFn</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 箭头函数中没有this和arguments</span></span><br><span class="line">    beforeFn();</span><br><span class="line">    <span class="comment">// this向上级作用域查找，代表Function实例</span></span><br><span class="line">    <span class="keyword">this</span>(...args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> say=<span class="function">(<span class="params">...args</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(args,<span class="string">'say'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 得到新函数，this指向say</span></span><br><span class="line"><span class="keyword">let</span> hello=say.before(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello'</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> bye=say.before(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'bye'</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 传参，传入this，即say函数</span></span><br><span class="line">hello(<span class="string">'2019'</span>);</span><br><span class="line">bye(<span class="string">'2018'</span>,<span class="string">'world'</span>)</span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="comment">//hello</span></span><br><span class="line"><span class="comment">//[ '2019' ] 'say'</span></span><br><span class="line"><span class="comment">//bye</span></span><br><span class="line"><span class="comment">//[ '2018', 'world' ] 'say'</span></span><br></pre></td></tr></table></figure><h3 id="transcation事务"><a href="#transcation事务" class="headerlink" title="transcation事务"></a>transcation事务</h3><p>实际应用 react事务的改变，可以在前面和后面，同时增加方法</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;高阶函数：参数是函数 或 返回值是函数的函数&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
      <category term="ES" scheme="http://yoursite.com/categories/JavaScript/ES/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="ES" scheme="http://yoursite.com/tags/ES/"/>
    
  </entry>
  
  <entry>
    <title>vue中使用JWT认证</title>
    <link href="http://yoursite.com/2019/08/16/vue%E4%B8%AD%E4%BD%BF%E7%94%A8JWT%E8%AE%A4%E8%AF%81/"/>
    <id>http://yoursite.com/2019/08/16/vue中使用JWT认证/</id>
    <published>2019-08-16T01:20:00.000Z</published>
    <updated>2019-08-17T09:39:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建项目并配置vue-config-js"><a href="#创建项目并配置vue-config-js" class="headerlink" title="创建项目并配置vue-config.js"></a>创建项目并配置vue-config.js</h2><p>使用vue-cli3.0创建vue项目：<code>vue create &lt;project-name&gt;</code>，配置vue-config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  publicPath:process.env.NODE_ENV === <span class="string">'production'</span>? <span class="string">'/vue-project'</span>:<span class="string">'/'</span>,</span><br><span class="line">  outputDir:<span class="string">'myassets'</span>, <span class="comment">// 输出路径</span></span><br><span class="line">  assetsDir:<span class="string">'static'</span>, <span class="comment">// 生成静态目录的文件夹</span></span><br><span class="line">  runtimeCompiler: <span class="literal">true</span>, <span class="comment">// 是否可以使用template模板</span></span><br><span class="line">  parallel:<span class="built_in">require</span>(<span class="string">'os'</span>).cpus().length &gt; <span class="number">1</span>, <span class="comment">//多余1核cpu时 启动并行压缩</span></span><br><span class="line">  productionSourceMap:<span class="literal">false</span>, <span class="comment">//生产环境下 不使用soruceMap</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// https://github.com/neutrinojs/webpack-chain</span></span><br><span class="line">  chainWebpack:<span class="function"><span class="params">config</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 控制webpack内部配置</span></span><br><span class="line">    config.resolve.alias.set(<span class="string">'component'</span>,path.resolve(__dirname,<span class="string">'src/components'</span>));</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// https://github.com/survivejs/webpack-merge</span></span><br><span class="line">  configureWebpack:&#123;</span><br><span class="line">    <span class="comment">// 新增插件等</span></span><br><span class="line">    plugins:[]</span><br><span class="line">  &#125;,</span><br><span class="line">  devServer:&#123; <span class="comment">// 配置代理</span></span><br><span class="line">    proxy:&#123;</span><br><span class="line">      <span class="string">'/api'</span>:&#123;</span><br><span class="line">          target:<span class="string">'http://a.zf.cn:3000'</span>,</span><br><span class="line">          changeOrigin:<span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 第三方插件配置</span></span><br><span class="line">  pluginOptions: &#123;</span><br><span class="line">    <span class="string">'style-resources-loader'</span>: &#123;</span><br><span class="line">      preProcessor: <span class="string">'less'</span>,</span><br><span class="line">      patterns: [</span><br><span class="line">        <span class="comment">// 插入全局样式</span></span><br><span class="line">        path.resolve(__dirname,<span class="string">'src/assets/common.less'</span>)</span><br><span class="line">      ],</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="jwt"><a href="#jwt" class="headerlink" title="jwt"></a>jwt</h2><p>JSON Web Token（JWT）是目前最流行的跨域身份验证解决方案</p><ul><li><p><strong>解决问题</strong>：session不支持分布式架构，无法支持横向扩展，只能通过数据库来保存会话数据实现共享。如果持久层失败会出现认证失败。</p></li><li><p><strong>优点</strong>：服务器不保存任何会话数据，即服务器变为无状态，使其更容易扩展。</p></li></ul><h3 id="JWT包含了使用-分隔的三部分"><a href="#JWT包含了使用-分隔的三部分" class="headerlink" title="JWT包含了使用.分隔的三部分"></a>JWT包含了使用<code>.</code>分隔的三部分</h3><ul><li><p>Header 头部 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">"alg"</span>: <span class="string">"HS256"</span>, <span class="string">"typ"</span>: <span class="string">"JWT"</span>&#125;   </span><br><span class="line"><span class="comment">// algorithm =&gt; HMAC SHA256</span></span><br><span class="line"><span class="comment">// type =&gt; JWT</span></span><br></pre></td></tr></table></figure></li><li><p>Payload 负载、载荷</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">JWT 规定了7个官方字段</span><br><span class="line">iss (issuer)：签发人</span><br><span class="line">exp (expiration time)：过期时间</span><br><span class="line">sub (subject)：主题</span><br><span class="line">aud (audience)：受众</span><br><span class="line">nbf (Not Before)：生效时间</span><br><span class="line">iat (Issued At)：签发时间</span><br><span class="line">jti (JWT ID)：编号</span><br></pre></td></tr></table></figure></li><li><p>Signature 签名</p><p>对前两部分的签名，防止数据篡改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64UrlEncode(header) + <span class="string">"."</span> +</span><br><span class="line">  base64UrlEncode(payload),</span><br><span class="line">  secret)</span><br></pre></td></tr></table></figure></li></ul><p>JWT 作为一个令牌（token），有些场合可能会放到 URL（比如 api.example.com/?token=xxx）。Base64 有三个字符<code>+</code>、<code>/</code>和<code>=</code>，在 URL 里面有特殊含义，所以要被替换掉：<code>=</code>被省略、<code>+</code>替换成<code>-</code>，<code>/</code>替换成<code>_</code> 。这就是 Base64URL 算法。</p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>HTTP 请求的头信息<code>Authorization</code>字段里面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Authorization: Bearer &lt;token&gt;</span><br></pre></td></tr></table></figure><p>通过url传输</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.xxx.com/pwa?token=xxxxx</span><br></pre></td></tr></table></figure><p>如果是post请求也可以放在请求体中</p><h2 id="二-服务端返回TOKEN"><a href="#二-服务端返回TOKEN" class="headerlink" title="二.服务端返回TOKEN"></a>二.服务端返回TOKEN</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line"><span class="keyword">let</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">let</span> jwt = <span class="built_in">require</span>(<span class="string">'jsonwebtoken'</span>);</span><br><span class="line">app.use(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"http://localhost:8080"</span>);</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"GET,HEAD,OPTIONS,POST,PUT"</span>);</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Origin, X-Requested-With, Content-Type, Accept, Authorization"</span>);</span><br><span class="line">    <span class="keyword">if</span>(req.method.toLowerCase() === <span class="string">'options'</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.end();</span><br><span class="line">    &#125;</span><br><span class="line">    next();</span><br><span class="line">&#125;)</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line"><span class="keyword">let</span> secret = <span class="string">'zfjg'</span>;</span><br><span class="line">app.get(<span class="string">'/test'</span>,(req,res)=&gt;&#123;</span><br><span class="line">    res.end(&#123;<span class="attr">test</span>:<span class="string">'test'</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.post(<span class="string">'/login'</span>,(req,res)=&gt;&#123;</span><br><span class="line">   <span class="keyword">let</span> &#123;username&#125; = req.body;</span><br><span class="line">   <span class="keyword">if</span>(username === <span class="string">'admin'</span>)&#123; <span class="comment">// 如果访问的是admin 种植cookie</span></span><br><span class="line">        res.json(&#123;</span><br><span class="line">            code:<span class="number">0</span>,</span><br><span class="line">            username:<span class="string">'admin'</span>,</span><br><span class="line">            token:jwt.sign(&#123;<span class="attr">username</span>:<span class="string">'admin'</span>&#125;,secret,&#123;</span><br><span class="line">                expiresIn:<span class="number">20</span>  </span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       res.json(&#123;</span><br><span class="line">           code:<span class="number">1</span>,</span><br><span class="line">           data:<span class="string">'用户名不存在'</span></span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">'/validate'</span>,(req,res)=&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> token = req.headers.authorization;</span><br><span class="line">    jwt.verify(token,secret,(err,decode)=&gt;&#123; <span class="comment">// 验证token的可靠性</span></span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="keyword">return</span> res.json(&#123;</span><br><span class="line">                code:<span class="number">1</span>,</span><br><span class="line">                data:<span class="string">'token失效了'</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res.json(&#123; </span><br><span class="line">                username:decode.username,</span><br><span class="line">                code:<span class="number">0</span>, <span class="comment">// 延长tokne的过期时间</span></span><br><span class="line">                token:jwt.sign(&#123;<span class="attr">username</span>:<span class="string">'admin'</span>&#125;,secret,&#123;</span><br><span class="line">                    expiresIn:<span class="number">20</span>  </span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h2 id="三-路由配置"><a href="#三-路由配置" class="headerlink" title="三.路由配置"></a>三.路由配置</h2><ul><li>Home.vue     首页</li><li>Profile.vue  个人中心</li><li>Login.vue    登录页面</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  base: process.env.BASE_URL,</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      name: <span class="string">'home'</span>,</span><br><span class="line">      component: Home,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/profile'</span>,</span><br><span class="line">      name: <span class="string">'profile'</span>,</span><br><span class="line">      component: Profile,</span><br><span class="line">      meta: &#123; <span class="attr">needLogin</span>: <span class="literal">true</span> &#125;, <span class="comment">// 必须要登录才能访问</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/login'</span>,</span><br><span class="line">      name: <span class="string">'login'</span>,</span><br><span class="line">      component: Login,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="四-axios封装"><a href="#四-axios封装" class="headerlink" title="四.axios封装"></a>四.axios封装</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FetchData</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.baseURL = process.env.NODE_ENV === <span class="string">'development'</span> ? <span class="string">'http://localhost:3000'</span> : <span class="string">'/'</span>; <span class="comment">// 请求路径 </span></span><br><span class="line">    <span class="keyword">this</span>.timeout = <span class="number">3000</span>; <span class="comment">// 设置超时时间</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setInterceptor(instance) &#123; <span class="comment">// 设置拦截器</span></span><br><span class="line">    instance.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">      config.headers.Authorization = <span class="string">`<span class="subst">$&#123;localStorage.getItem(<span class="string">'token'</span>)&#125;</span>`</span>;</span><br><span class="line">      <span class="keyword">return</span> config; <span class="comment">// 增加token</span></span><br><span class="line">    &#125;, (err) =&gt; &#123;</span><br><span class="line">      <span class="built_in">Promise</span>.reject(err);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    instance.interceptors.response.use(<span class="function"><span class="params">res</span> =&gt;</span> res.data, (err) =&gt; &#123;</span><br><span class="line">      <span class="built_in">Promise</span>.reject(err);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  request(request) &#123;</span><br><span class="line">    <span class="keyword">const</span> instance = axios.create();</span><br><span class="line">    <span class="keyword">const</span> config = &#123;</span><br><span class="line">      baseURL: <span class="keyword">this</span>.baseURL,</span><br><span class="line">      timeout: <span class="keyword">this</span>.timeout,</span><br><span class="line">      ...request,</span><br><span class="line">    &#125;; <span class="comment">// 合并配置</span></span><br><span class="line">    <span class="keyword">this</span>.setInterceptor(instance);</span><br><span class="line">    <span class="keyword">return</span> instance(config);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> FetchData();</span><br></pre></td></tr></table></figure><h2 id="五-测试接口"><a href="#五-测试接口" class="headerlink" title="五.测试接口"></a>五.测试接口</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getTest = <span class="function"><span class="params">()</span> =&gt;</span> fetchData.request(&#123; <span class="attr">url</span>: <span class="string">'/test'</span> &#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> login = <span class="function"><span class="params">username</span> =&gt;</span> fetchData.request(&#123;</span><br><span class="line">  url: <span class="string">'/login'</span>,</span><br><span class="line">  method: <span class="string">'POST'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    username,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> validate = <span class="function"><span class="params">()</span> =&gt;</span> fetchData.request(&#123; <span class="attr">url</span>: <span class="string">'/validate'</span> &#125;);</span><br></pre></td></tr></table></figure><h2 id="六-在vuex中发送请求"><a href="#六-在vuex中发送请求" class="headerlink" title="六.在vuex中发送请求"></a>六.在vuex中发送请求</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    username: <span class="string">''</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    setUsername(state, username) &#123;</span><br><span class="line">      state.username = username;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    <span class="keyword">async</span> login(&#123; commit &#125;, username) &#123;</span><br><span class="line">      <span class="keyword">const</span> r = <span class="keyword">await</span> login(username); <span class="comment">// 登录成功后返回用户名信息</span></span><br><span class="line">      <span class="keyword">if</span> (r.token) &#123; <span class="comment">// 如果有返回token说明成功</span></span><br><span class="line">        commit(<span class="string">'setUsername'</span>, username); <span class="comment">// 将用户存入state中</span></span><br><span class="line">        localStorage.setItem(<span class="string">'token'</span>, r.token); <span class="comment">// 将token存放起来</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123; <span class="comment">// 否则返回失败的promise</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(r);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="七-权限认证"><a href="#七-权限认证" class="headerlink" title="七.权限认证"></a>七.权限认证</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> validate(&#123; commit &#125;) &#123;</span><br><span class="line">    <span class="keyword">const</span> r = <span class="keyword">await</span> validate();</span><br><span class="line">    <span class="keyword">if</span> (r.code === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    commit(<span class="string">'setUsername'</span>, r.username);</span><br><span class="line">    localStorage.setItem(<span class="string">'token'</span>, r.token); <span class="comment">// 将token存放起来</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断用户访问权限<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(<span class="keyword">async</span> (to, <span class="keyword">from</span>, next) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 如果不需要校验可以设置白名单</span></span><br><span class="line">  <span class="keyword">const</span> isLogin = <span class="keyword">await</span> store.dispatch(<span class="string">'validate'</span>);</span><br><span class="line">  <span class="keyword">if</span> (isLogin) &#123;</span><br><span class="line">    <span class="comment">// 如果是登录</span></span><br><span class="line">    <span class="keyword">if</span> (to.name === <span class="string">'login'</span>) &#123;</span><br><span class="line">      next(<span class="string">'/profile'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      next();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> flag = to.matched.some(<span class="function"><span class="params">item</span> =&gt;</span> item.meta.needLogin);</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">      next(<span class="string">'/login'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      next();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;创建项目并配置vue-config-js&quot;&gt;&lt;a href=&quot;#创建项目并配置vue-config-js&quot; class=&quot;headerlink&quot; title=&quot;创建项目并配置vue-config.js&quot;&gt;&lt;/a&gt;创建项目并配置vue-config.js&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
      <category term="vue" scheme="http://yoursite.com/categories/JavaScript/vue/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue中render函数之JSX应用</title>
    <link href="http://yoursite.com/2019/08/15/vue%E4%B8%ADrender%E5%87%BD%E6%95%B0%E4%B9%8BJSX%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2019/08/15/vue中render函数之JSX应用/</id>
    <published>2019-08-15T02:22:04.000Z</published>
    <updated>2019-08-16T01:20:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="快速原型开发"><a href="#快速原型开发" class="headerlink" title="快速原型开发"></a>快速原型开发</h2><p><code>@vue/cli-service-global</code>可以快速识别.vue文件封装组件插件等功能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install @vue/cli -g</span><br><span class="line">sudo npm install -g @vue/cli-service-global</span><br><span class="line">vue serve App.vue</span><br></pre></td></tr></table></figure><h2 id="模板缺陷"><a href="#模板缺陷" class="headerlink" title="模板缺陷"></a>模板缺陷</h2><p>模板最大的缺点是不易扩展，可能会造成逻辑冗余。</p><p>Level组件需要对不同的type产生不同的标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用Level组件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Level</span> <span class="attr">:type</span>=<span class="string">"1"</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">Level</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Level</span> <span class="attr">:type</span>=<span class="string">"2"</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">Level</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Level</span> <span class="attr">:type</span>=<span class="string">"3"</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">Level</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"type==1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else-if</span>=<span class="string">"type==2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-else-if</span>=<span class="string">"type==3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// Level组件</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    props: &#123;</span></span><br><span class="line"><span class="undefined">      type: &#123;</span></span><br><span class="line"><span class="javascript">        type: <span class="built_in">Number</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h2><p>函数式组件没有模板,必须提供render函数</p><blockquote><p>复杂的逻辑变得非常简单</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数式组件导出对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 必须提供render函数</span></span><br><span class="line">  render(h) &#123;</span><br><span class="line">    <span class="keyword">return</span> h(</span><br><span class="line">      <span class="string">"h"</span> + <span class="keyword">this</span>.type<span class="comment">/*标签类型*/</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 绑定事件</span></span><br><span class="line">        on:&#123;</span><br><span class="line">          click()&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//设置属性</span></span><br><span class="line">        attrs:&#123;</span><br><span class="line">          a:<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;<span class="comment">/*属性*/</span>,</span><br><span class="line">      <span class="keyword">this</span>.$slots.default<span class="comment">/*子节点*/</span></span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    type: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="JSX应用"><a href="#JSX应用" class="headerlink" title="JSX应用"></a>JSX应用</h2><p>jsx会让代码看起来更加简洁易于读取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  render(h) &#123;</span><br><span class="line">    <span class="keyword">const</span> tag = <span class="string">"h"</span> + <span class="keyword">this</span>.type;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">tag</span>&gt;</span>&#123;this.$slots.default&#125;<span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    type: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="render方法订制组件"><a href="#render方法订制组件" class="headerlink" title="render方法订制组件"></a>render方法订制组件</h2><p>编写List组件可以根据用户传入的数据自动循环列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">List</span> <span class="attr">:data</span>=<span class="string">"data"</span>&gt;</span><span class="tag">&lt;/<span class="name">List</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">"./components/List"</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    data() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123; <span class="attr">data</span>: [<span class="string">"苹果"</span>, <span class="string">"香蕉"</span>, <span class="string">"橘子"</span>] &#125;;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    components: &#123;</span></span><br><span class="line"><span class="undefined">      List</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- List组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in data"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">props: &#123;</span></span><br><span class="line"><span class="javascript">  data: <span class="built_in">Array</span>,</span></span><br><span class="line"><span class="javascript">  <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> []</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Lsit组件自定义循环的元素</p><ul><li>通过render方法来订制,在父组件中传入render方法</li><li>我们需要createElement方法，就会想到可以编写个函数组件，将createElement方法传递出来</li><li>ListItem.vue调用最外层的render方法，将createElement和当前项传递出来</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--父组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">List</span> <span class="attr">:data</span>=<span class="string">"data"</span> <span class="attr">:render</span>=<span class="string">"render"</span>&gt;</span><span class="tag">&lt;/<span class="name">List</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">"./components/List"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="undefined">  data() &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123; <span class="attr">data</span>: [<span class="string">"苹果"</span>, <span class="string">"香蕉"</span>, <span class="string">"橘子"</span>] &#125;;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  components:&#123;</span></span><br><span class="line"><span class="undefined">    List</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods:&#123;</span></span><br><span class="line"><span class="undefined">    render(h, name) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--List组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in data"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-if</span>=<span class="string">"!render"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 将render方法传到函数组件中，将渲染项传入到组件中，在内部回调这个render方法 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ListItem</span> <span class="attr">v-else</span> <span class="attr">:item</span>=<span class="string">"item"</span> <span class="attr">:render</span>=<span class="string">"render"</span>&gt;</span><span class="tag">&lt;/<span class="name">ListItem</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 函数组件ListItem</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> ListItem <span class="keyword">from</span> <span class="string">"./ListItem"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  components: &#123;</span></span><br><span class="line"><span class="undefined">    ListItem</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  props: &#123;</span></span><br><span class="line"><span class="undefined">    render: &#123;</span></span><br><span class="line"><span class="javascript">      type: <span class="built_in">Function</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    data:&#123;</span></span><br><span class="line"><span class="javascript">      type:<span class="built_in">Array</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> []</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--ListItem组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined"> props: &#123;</span></span><br><span class="line"><span class="undefined">  render: &#123;</span></span><br><span class="line"><span class="javascript">   type: <span class="built_in">Function</span></span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  item: &#123;&#125;</span></span><br><span class="line"><span class="undefined"> &#125;,</span></span><br><span class="line"><span class="undefined"> render(h) &#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">return</span> <span class="keyword">this</span>.render(h, <span class="keyword">this</span>.item);</span></span><br><span class="line"><span class="undefined"> &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="slot-作用域插槽"><a href="#slot-作用域插槽" class="headerlink" title="slot 作用域插槽"></a>slot 作用域插槽</h2><p>使用<code>v-slot</code>定义模板和设置模板的参数，使用<code>&lt;slot&gt;</code>使用模板并给模板传递参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--child用于匹配--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--父组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">List</span> <span class="attr">:arr</span>=<span class="string">"arr"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:child</span>=<span class="string">"&#123;item&#125;"</span>&gt;</span></span><br><span class="line">        &#123;&#123;item&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">List</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--List组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">"(item,key) in arr"</span> <span class="attr">:key</span>=<span class="string">"key"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"child"</span> <span class="attr">:item</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="编写可编辑表格"><a href="#编写可编辑表格" class="headerlink" title="编写可编辑表格"></a>编写可编辑表格</h2><p>基于iview使用jsx扩展成可编辑的表格</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Table</span> <span class="attr">:columns</span>=<span class="string">"columns"</span> <span class="attr">:data</span>=<span class="string">"data"</span>&gt;</span><span class="tag">&lt;/<span class="name">Table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  methods:&#123;</span></span><br><span class="line"><span class="undefined">    render(h,&#123;column,index,row&#125;)&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> value = row[column.key];</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 绑定原生事件，onOn-enter传参on-enter函数</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> (</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">on-click</span>=<span class="string">&#123;(e)</span>=&gt;</span>this.changeIndex(e,index)&#125; &gt;</span></span><br><span class="line"><span class="javascript">          &#123;<span class="keyword">this</span>.index === index?(</span></span><br><span class="line"><span class="javascript">            &lt;i-input type=<span class="string">"text"</span></span></span><br><span class="line"><span class="undefined">                    value=&#123;value&#125;</span></span><br><span class="line"><span class="undefined">                    on-input=&#123;(value)=&gt;&#123;</span></span><br><span class="line"><span class="javascript">                                  <span class="keyword">this</span>.handleChange(value,column,row)</span></span><br><span class="line"><span class="undefined">                              &#125;&#125;</span></span><br><span class="line"><span class="javascript">                    onOn-enter=&#123;()=&gt;<span class="keyword">this</span>.enter(row,index)&#125;</span></span><br><span class="line"><span class="undefined">            /&gt;</span></span><br><span class="line"><span class="undefined">          ):(</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="undefined">          )&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="undefined">      )</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    enter(row,index)&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.data.splice(index,<span class="number">1</span>,row);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.index = <span class="number">-1</span>;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    handleChange(value,column,row)&#123;</span></span><br><span class="line"><span class="javascript">      row[column[<span class="string">'key'</span>]]= value;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    changeIndex(e,index)&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.index = index;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">        e.currentTarget.getElementsByTagName(<span class="string">"input"</span>)[<span class="number">0</span>].focus()</span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  data() &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">      index:-1,</span></span><br><span class="line"><span class="undefined">      columns: [</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">          title: <span class="string">'Name'</span>,</span></span><br><span class="line"><span class="javascript">          key: <span class="string">'name'</span>,</span></span><br><span class="line"><span class="javascript">          render:<span class="keyword">this</span>.render</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">          title: <span class="string">'Age'</span>,</span></span><br><span class="line"><span class="javascript">          key: <span class="string">'age'</span>,</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">          title: <span class="string">'Address'</span>,</span></span><br><span class="line"><span class="javascript">          key: <span class="string">'address'</span>,</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">      ],</span></span><br><span class="line"><span class="undefined">      data: [</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">          name: <span class="string">'John Brown'</span>,</span></span><br><span class="line"><span class="undefined">          age: 18,</span></span><br><span class="line"><span class="javascript">          address: <span class="string">'New York No. 1 Lake Park'</span>,</span></span><br><span class="line"><span class="javascript">          date: <span class="string">'2016-10-03'</span>,</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">          name: <span class="string">'Jim Green'</span>,</span></span><br><span class="line"><span class="undefined">          age: 24,</span></span><br><span class="line"><span class="javascript">          address: <span class="string">'London No. 1 Lake Park'</span>,</span></span><br><span class="line"><span class="javascript">          date: <span class="string">'2016-10-01'</span>,</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      ],</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;快速原型开发&quot;&gt;&lt;a href=&quot;#快速原型开发&quot; class=&quot;headerlink&quot; title=&quot;快速原型开发&quot;&gt;&lt;/a&gt;快速原型开发&lt;/h2&gt;&lt;p&gt;&lt;code&gt;@vue/cli-service-global&lt;/code&gt;可以快速识别.vue文件封装组件插件
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
      <category term="vue" scheme="http://yoursite.com/categories/JavaScript/vue/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue组件间通信方式</title>
    <link href="http://yoursite.com/2019/08/13/vue%E7%BB%84%E4%BB%B6%E9%97%B4%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/13/vue组件间通信方式/</id>
    <published>2019-08-13T05:39:00.000Z</published>
    <updated>2019-08-15T02:22:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">components</span><br><span class="line">   ├── Grandson1.vue</span><br><span class="line">   ├── Grandson2.vue</span><br><span class="line">   ├── Parent.vue</span><br><span class="line">   ├── Son1.vue</span><br><span class="line">   └── Son2.vue</span><br></pre></td></tr></table></figure><h2 id="Props（父传子）"><a href="#Props（父传子）" class="headerlink" title="Props（父传子）"></a>Props（父传子）</h2><ul><li><p>在父组件<code>Parent.vue</code>中使用子组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    父组件:&#123;&#123;mny&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">Son1</span> <span class="attr">:mny</span>=<span class="string">"mny"</span>&gt;</span><span class="tag">&lt;/<span class="name">Son1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Son1 <span class="keyword">from</span> <span class="string">"./Son1"</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 注册子组件</span></span></span><br><span class="line"><span class="undefined">    components: &#123;</span></span><br><span class="line"><span class="undefined">      Son1</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    data() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123; <span class="attr">mny</span>: <span class="number">100</span> &#125;;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在子组件<code>Son1.vue</code>中接受父组件的属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>子组件1: &#123;&#123;mny&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 接收父组件传递的属性</span></span></span><br><span class="line"><span class="undefined">    props: &#123;</span></span><br><span class="line"><span class="undefined">      mny: &#123;</span></span><br><span class="line"><span class="javascript">        type: <span class="built_in">Number</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="emit（子传父）"><a href="#emit（子传父）" class="headerlink" title="$emit（子传父）"></a>$emit（子传父）</h2><p>子组件通过事件触发父组件绑定的回调，将修改的内容传递给父组件</p><ul><li><p>在父组件<code>Parent.vue</code>中绑定事件的回调</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    父组件:&#123;&#123;mny&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">Son1</span> <span class="attr">:mny</span>=<span class="string">"mny"</span> @<span class="attr">input</span>=<span class="string">"change"</span>&gt;</span><span class="tag">&lt;/<span class="name">Son1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Son1 <span class="keyword">from</span> <span class="string">"./Son1"</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">      change(mny) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.mny = mny;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    components: &#123;</span></span><br><span class="line"><span class="undefined">      Son1</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    data() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123; <span class="attr">mny</span>: <span class="number">100</span> &#125;;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在子组件<code>Son1.vue</code>触发事件回调</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    子组件1: &#123;&#123;mny&#125;&#125;</span><br><span class="line">    <span class="comment">&lt;!--触发事件回调，并传参--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"$emit('input',200)"</span>&gt;</span>更改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    props: &#123;</span></span><br><span class="line"><span class="undefined">      mny: &#123;</span></span><br><span class="line"><span class="javascript">        type: <span class="built_in">Number</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="语法糖的写法（同步父子组件的数据）"><a href="#语法糖的写法（同步父子组件的数据）" class="headerlink" title="语法糖的写法（同步父子组件的数据）"></a>语法糖的写法（同步父子组件的数据）</h3><ul><li><p>.sync</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--父组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Son1</span> <span class="attr">:mny.sync</span>=<span class="string">"mny"</span>&gt;</span><span class="tag">&lt;/<span class="name">Son1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--父组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Son1</span> <span class="attr">:mny.sync</span>=<span class="string">"mny"</span>&gt;</span><span class="tag">&lt;/<span class="name">Son1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--子组件--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 触发的事件名 update:(绑定.sync属性的名字) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"$emit('update:mny',200)"</span>&gt;</span>更改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>v-model</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--父组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Son1</span> <span class="attr">v-model</span>=<span class="string">"mny"</span>&gt;</span><span class="tag">&lt;/<span class="name">Son1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--子组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--只能是value--&gt;</span></span><br><span class="line">    子组件1: &#123;&#123;value&#125;&#125;</span><br><span class="line">    <span class="comment">&lt;!--只能是input--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"$emit('input',200)"</span>&gt;</span>更改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    props: &#123;</span></span><br><span class="line"><span class="javascript">      value: &#123; <span class="comment">// 接收到的属性名只能叫value</span></span></span><br><span class="line"><span class="javascript">        type: <span class="built_in">Number</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="parent和-children"><a href="#parent和-children" class="headerlink" title="$parent和$children"></a>$parent和$children</h2><p><code>$parent</code>父组件实例，<code>$children</code>子组件实例组成的数组，可以用来继续将属性传递</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--父组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    父组件:&#123;&#123;mny&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">Son1</span> <span class="attr">:value</span>=<span class="string">"mny"</span> @<span class="attr">input</span>=<span class="string">"change"</span>&gt;</span><span class="tag">&lt;/<span class="name">Son1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Son1 <span class="keyword">from</span> <span class="string">"./Son1"</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">      change(mny) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.mny = mny;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    components: &#123;</span></span><br><span class="line"><span class="undefined">      Son1</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    data() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123; <span class="attr">mny</span>: <span class="number">100</span> &#125;;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--子组件Son1--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Grandson1</span> <span class="attr">:value</span>=<span class="string">"value"</span>&gt;</span><span class="tag">&lt;/<span class="name">Grandson1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--子组件的子组件Grandson1--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    孙子:&#123;&#123;value&#125;&#125;</span><br><span class="line">    <span class="comment">&lt;!-- 触发父组件的input事件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"$parent.$emit('input',200)"</span>&gt;</span>更改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    props: &#123;</span></span><br><span class="line"><span class="undefined">      value: &#123;</span></span><br><span class="line"><span class="javascript">        type: <span class="built_in">Number</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>如果层级很深那么就会出现<code>$parent.$parent.....</code>，封装<code>$dispatch</code>方法和<code>$broadcast</code>方法层层向上或向下进行派发，解决这个问题</p></blockquote><h2 id="层层传递"><a href="#层层传递" class="headerlink" title="层层传递"></a>层层传递</h2><h3 id="dispatch（层层向上）"><a href="#dispatch（层层向上）" class="headerlink" title="$dispatch（层层向上）"></a>$dispatch（层层向上）</h3><p>通过层层向上触发某个事件传递数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.$dispatch = <span class="function"><span class="keyword">function</span> <span class="title">$dispatch</span>(<span class="params">eventName, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> parent = <span class="keyword">this</span>.$parent;</span><br><span class="line">  <span class="keyword">while</span> (parent) &#123;</span><br><span class="line">    parent.$emit(eventName, data);</span><br><span class="line">    parent = parent.$parent;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>同样可以封装一个<code>$broadcast</code>方法层层向下进行派发</p></blockquote><h3 id="broadcast（层层向下）"><a href="#broadcast（层层向下）" class="headerlink" title="$broadcast（层层向下）"></a>$broadcast（层层向下）</h3><p>通过层层向下触发某个事件传递数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.$broadcast = <span class="function"><span class="keyword">function</span> <span class="title">$broadcast</span>(<span class="params">eventName, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> broadcast = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$children.forEach(<span class="function">(<span class="params">child</span>) =&gt;</span> &#123;</span><br><span class="line">      child.$emit(eventName, data);</span><br><span class="line">      <span class="keyword">if</span> (child.$children) &#123;</span><br><span class="line">        $broadcast.call(child, eventName, data);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  broadcast.call(<span class="keyword">this</span>, eventName, data);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="批量传递"><a href="#批量传递" class="headerlink" title="批量传递"></a>批量传递</h2><h3 id="attrs"><a href="#attrs" class="headerlink" title="$attrs"></a>$attrs</h3><p>代表没有被props接收的剩余属性的集合，可以用于批量向下传递属性</p><blockquote><p><code>inheritAttrs:false</code>使$attrs的属性不在真实DOM上</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--父组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Son2</span> <span class="attr">name</span>=<span class="string">"小珠峰"</span> <span class="attr">age</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">Son2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--子组件 可以在son2组件中使用$attrs属性,可以利用v-bind批量设置属性并继续向下传递 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  儿子2: &#123;&#123;$attrs.name&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">Grandson2</span> <span class="attr">v-bind</span>=<span class="string">"$attrs"</span>&gt;</span><span class="tag">&lt;/<span class="name">Grandson2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    inheritAttrs:<span class="literal">false</span>,</span></span><br><span class="line"><span class="undefined"> &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--子组件的子组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>孙子:&#123;&#123;$attrs&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    inheritAttrs:<span class="literal">false</span>,</span></span><br><span class="line"><span class="undefined"> &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="listeners"><a href="#listeners" class="headerlink" title="$listeners"></a>$listeners</h3><p>代表绑定事件的回调函数的集合，可以用于批量向下传递事件及回调</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--父组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Son2</span> <span class="attr">name</span>=<span class="string">"小珠峰"</span> <span class="attr">age</span>=<span class="string">"10"</span> @<span class="attr">click</span>=<span class="string">"()=&gt;&#123;this.mny = 500&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">Son2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--子组件 可以在son2组件中使用listeners属性,可以利用v-on批量绑定事件并将事件继续向下传递 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Grandson2</span> <span class="attr">v-bind</span>=<span class="string">"$attrs"</span> <span class="attr">v-on</span>=<span class="string">"$listeners"</span>&gt;</span><span class="tag">&lt;/<span class="name">Grandson2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--子组件的子组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"$listeners.click()"</span>&gt;</span>更改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="子组件共享父组件数据（类似react的context）"><a href="#子组件共享父组件数据（类似react的context）" class="headerlink" title="子组件共享父组件数据（类似react的context）"></a>子组件共享父组件数据（类似react的context）</h2><blockquote><p>在业务场景下不推荐使用，一般在封装的库中使用</p></blockquote><ul><li><p>Provide在父级中注入要被共享的数据，可以为对象或函数</p><blockquote><p>可以直接注入父组件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">provide() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;<span class="attr">parentMsg</span>: <span class="string">"父亲"</span>,<span class="attr">parent</span>:<span class="keyword">this</span>&#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>Inject在任意子组件中注入父级共享数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inject: [<span class="string">"parentMsg"</span>,<span class="string">"parent"</span>] <span class="comment">// 会将数据挂载在当前实例上</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Ref（父组件获取子组件数据）"><a href="#Ref（父组件获取子组件数据）" class="headerlink" title="Ref（父组件获取子组件数据）"></a>Ref（父组件获取子组件数据）</h2><p><code>ref</code>属性放在组件上，获取的是当前组件实例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Grandson2</span> <span class="attr">v-bind</span>=<span class="string">"$attrs"</span> <span class="attr">v-on</span>=<span class="string">"$listeners"</span> <span class="attr">ref</span>=<span class="string">"grand2"</span>&gt;</span><span class="tag">&lt;/<span class="name">Grandson2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">mounted() &#123; // 获取组件定义的属性</span><br><span class="line">  console.log(this.$refs.grand2.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="EventBus（跨组件传递）"><a href="#EventBus（跨组件传递）" class="headerlink" title="EventBus（跨组件传递）"></a>EventBus（跨组件传递）</h2><p>用于跨组件通知，<strong>不复杂的项目可以使用这种方式</strong>。缺陷是定义到了全局上，会造成重名，不适合复杂项目</p><ul><li><p>公开发布订阅</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.$bus = <span class="keyword">new</span> Vue();</span><br></pre></td></tr></table></figure></li><li><p>Son2组件和Grandson1相互通信</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">  <span class="keyword">this</span>.$bus.$on(<span class="string">"my"</span>, data =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">  <span class="comment">// 事件环，推迟执行，当页面渲染完成后再执行回调</span></span><br><span class="line">  <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.$bus.$emit(<span class="string">"my"</span>, <span class="string">"我是Grandson1"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul><h2 id="Vuex状态管理"><a href="#Vuex状态管理" class="headerlink" title="Vuex状态管理"></a>Vuex状态管理</h2><p><img src="/2019/08/13/vue组件间通信方式/vue组件间通信方式-20190815-10-22-04.png" alt="Vuex"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;文件结构&quot;&gt;&lt;a href=&quot;#文件结构&quot; class=&quot;headerlink&quot; title=&quot;文件结构&quot;&gt;&lt;/a&gt;文件结构&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
      <category term="vue" scheme="http://yoursite.com/categories/JavaScript/vue/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>监控</title>
    <link href="http://yoursite.com/2019/08/11/%E7%9B%91%E6%8E%A7/"/>
    <id>http://yoursite.com/2019/08/11/监控/</id>
    <published>2019-08-11T07:12:00.000Z</published>
    <updated>2019-08-11T09:41:00.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
      <category term="web" scheme="http://yoursite.com/categories/JavaScript/web/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>rangularJS_1.x</title>
    <link href="http://yoursite.com/2019/07/22/angularJS_1.x/"/>
    <id>http://yoursite.com/2019/07/22/angularJS_1.x/</id>
    <published>2019-07-22T06:29:00.000Z</published>
    <updated>2019-08-06T01:22:00.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>MVC 双向数据绑定(Model-View-ViewModel)</li><li>模版 将html文件解析到DOM中</li><li>模块化与依赖注入</li><li>指令可以用来创建自定义的标签，也可以用来装饰元素或者操作DOM属性</li></ul><blockquote><p>angularJS模板中要使用<code>-</code>连接命名形式，定义时要使用驼峰命名法<br><a id="more"></a></p></blockquote><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p><code>angular.module(&#39;moduleName&#39;,[])</code>，总容器，控制器、指令、服务、路由、过滤器都挂在它下面</p><ul><li>第一个参数：模块名，用于<code>ng-app</code>指令中</li><li>第二个参数：注入的依赖</li></ul><blockquote><ul><li>一个angularJS应用中只能有一个模块，控制整个页面</li><li>随模块创建<code>$rootScope</code>（根作用域），注入各个控制器中，控制整个页面</li></ul></blockquote><h2 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app=angular.module(<span class="string">'moduleName'</span>,[]);</span><br><span class="line">app.controller(<span class="string">'controllerName'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$rootScope,$scope</span>)</span>&#123;</span><br><span class="line">  $scope.name=<span class="string">'Earth'</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>第一个参数：控制器名，用于<code>ng-controller</code>指令中</li><li>第二个参数：视图渲染数据处理</li></ul><blockquote><ul><li>一个控制器，控制一段视图（一段HTML标签）</li><li>一个控制器创建一个<code>$scope</code>（本作用域），控制视图</li><li>控制器之间不能互相调用（交互需要通过事件实现）</li><li>不要在控制器中操作DOM元素（在指令中操作DOM元素）</li><li><p>不要在控制器中格式化数据或过滤操作（使用filter实现数据格式化），如<code>$rootScope.name=&#39;#&#39;+$rootScope.name</code>，会导致如下问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="comment">// 页面显示 $rootScope 渲染结果为 $#Earth</span></span><br><span class="line">&gt;   app.controller(<span class="string">'1homeCtrl'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$rootScope</span>)</span>&#123;</span><br><span class="line">&gt;     $rootScope.name=<span class="string">'Earth'</span>;</span><br><span class="line">&gt;     $rootScope.name=<span class="string">'#'</span>+$rootScope.name;</span><br><span class="line">&gt;   &#125;)</span><br><span class="line">&gt;   app.controller(<span class="string">'1homeCtrl'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$rootScope</span>)</span>&#123;</span><br><span class="line">&gt;     $rootScope.name=<span class="string">'$'</span>+$rootScope.name;</span><br><span class="line">&gt;   &#125;)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h3 id="模型scope"><a href="#模型scope" class="headerlink" title="模型scope"></a>模型scope</h3><ul><li>scope通过控制器派生</li><li>scope默认是个空对象</li><li>scope是一个上下文</li><li>scope是一个树型结构，和DOM标签平行</li><li>每个angularJS应用都有一个根作用域rootScope</li><li>scope可以传播事件，类似DOM事件，可以向上，也可以向下</li><li>scope是MVC基础，也是双向数据绑定的基础</li><li>替换变量时，类似作用域链查找，层层往上直到找到</li><li>scope上有很多方法<ul><li><code>$apply</code>：强行用模型刷新视图</li><li><code>$watch</code>：监听模型某个值的变化</li></ul></li></ul><h3 id="scope生命周期"><a href="#scope生命周期" class="headerlink" title="scope生命周期"></a>scope生命周期</h3><ul><li>创建：控制器创建时，自动创建</li><li>监听变化</li><li>当监听到模型发现变化时，通知监听者（需要通过angularJS的方法或指令实现）</li><li>销毁</li></ul><h3 id="事件-父子控制器交互"><a href="#事件-父子控制器交互" class="headerlink" title="事件(父子控制器交互)"></a>事件(父子控制器交互)</h3><p>常用于父子控制器之间的交互</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-controller</span>=<span class="string">"totalCtrl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">ng-model</span>=<span class="string">"total"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"detailCtrl"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--循环遍历渲染--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-repeat</span>=<span class="string">"item in items"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.price&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">ng-model</span>=<span class="string">"item.num"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./angular.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> app=angular.module(<span class="string">'eventModule'</span>,[]);</span></span><br><span class="line"><span class="javascript">  app.controller(<span class="string">'totalCtrl'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">    $scope.total=0;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 监听子控制器传参，进行操作</span></span></span><br><span class="line"><span class="javascript">    $scope.$on(<span class="string">'changeTotal'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e<span class="regexp">/*事件对象*/</span>,total<span class="regexp">/*接收参数*/</span></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">      $scope.total=total;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 监听 $scope.total 的变化</span></span></span><br><span class="line"><span class="javascript">    $scope.$watch(<span class="string">'total'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 向子控制器传参</span></span></span><br><span class="line"><span class="javascript">      $scope.$broadcast(<span class="string">'changeTotal'</span><span class="comment">/*事件名称*/</span>,$scope.total<span class="comment">/*要传的参数*/</span>);</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="javascript">  app.controller(<span class="string">'detailCtrl'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">    $scope.items=[</span></span><br><span class="line"><span class="javascript">      &#123;<span class="attr">name</span>:<span class="string">'馒头'</span>,<span class="attr">num</span>:<span class="number">0</span>,<span class="attr">price</span>:<span class="number">5</span>&#125;,</span></span><br><span class="line"><span class="javascript">      &#123;<span class="attr">name</span>:<span class="string">'包子'</span>,<span class="attr">num</span>:<span class="number">0</span>,<span class="attr">price</span>:<span class="number">10</span>&#125;];</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 深度监听对象数据类型 $scope.items 的变化</span></span></span><br><span class="line"><span class="javascript">    $scope.$watch(<span class="string">'items'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> total=<span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;$scope.items.length;i++)&#123;</span></span><br><span class="line"><span class="undefined">        total+=$scope.items[i].num*$scope.items[i].price;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 向父控制器传参</span></span></span><br><span class="line"><span class="javascript">      $scope.$emit(<span class="string">'changeTotal'</span><span class="comment">/*事件名称*/</span>,total<span class="comment">/*要传的参数*/</span>)</span></span><br><span class="line"><span class="javascript">    &#125;,<span class="literal">true</span><span class="comment">/*是否深度watch*/</span>)</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 监听父控制器传参，进行操作</span></span></span><br><span class="line"><span class="javascript">    $scope.$on(<span class="string">'changeTotal'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e<span class="regexp">/*事件对象*/</span>,total<span class="regexp">/*接收参数*/</span></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      $scope.items[<span class="number">1</span>].num=<span class="built_in">Math</span>.floor(total/$scope.items[<span class="number">1</span>].price);</span></span><br><span class="line"><span class="javascript">      $scope.items[<span class="number">0</span>].num=<span class="built_in">Math</span>.floor(total%$scope.items[<span class="number">1</span>].price/$scope.items[<span class="number">0</span>].price)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;input type=<span class="string">"text"</span> ng-model=<span class="string">"name"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">app.controller('homeCtrl',function($scope)&#123;</span></span><br><span class="line"><span class="regexp">  $scope.name='Earth';</span></span><br><span class="line"><span class="regexp">  $scope.$watch("name",function()&#123;</span></span><br><span class="line"><span class="regexp">    console.log($scope.name);</span></span><br><span class="line"><span class="regexp">  &#125;)</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.directive(<span class="string">'name'</span><span class="comment">/*指令名*/</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// 指令属性</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>指令实例的名称，使用时名称是<code>-</code>连接形式，在定义时要使用驼峰命名法，否则无法找到</p></blockquote><p>指令实例的属性设置</p><ul><li><p><code>restrict</code>: 设置指令用法，如<code>&#39;E&#39;</code>代表作为元素形式使用，<code>&#39;EA&#39;</code>代表作为元素形式或属性形式使用，默认值为<code>&#39;EACM&#39;</code></p><ul><li><code>E</code>：Element 元素</li><li><code>A</code>：Attribute 属性</li><li><code>C</code>：Class CSS类</li><li><code>M</code>：Comment 注释</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span><span class="comment">&lt;!--元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!--属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hello"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!--CSS类--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--directive:hello--&gt;</span><span class="comment">&lt;!--注释--&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>template</code>：模板，值用于渲染时嵌套入指令或替换指令，值类型</p><ul><li><code>&#39;&lt;div&gt;hello world&lt;/div&gt;&#39;</code></li><li><code>$templateCache.get(&#39;hello&#39;)</code></li></ul></li><li><code>templateUrl</code>：模板，值为文件路径，会发送一个请求，用于渲染时嵌套入指令或替换指令，如<code>&#39;./hello.html&#39;</code></li><li><code>replace</code>: 设置嵌套入或替换指令，值如下<ul><li><code>true</code>：替换指令，<code>EAC</code>形式没有外层标签，<code>M</code>形式可用<br><img src="/2019/07/22/angularJS_1.x/angularJS_1.x-20190805-16-05-33.png" alt="replace为true"></li><li><code>false</code>: 嵌套入指令，<code>EAC</code>形式有外层标签，<code>M</code>形式不能用<br><img src="/2019/07/22/angularJS_1.x/angularJS_1.x-20190805-16-09-27.png" alt="replace为false"></li></ul></li><li><p><code>transclude</code>：是否保存指令元素中或指令所在元素中的内容，通过<code>ng-transclude</code>(支持<code>EAC</code>三种形式)在模板中运用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--hello world 111--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hello</span>&gt;</span>111<span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">hello</span>&gt;</span>111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hello"</span>&gt;</span>111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  app.directive(<span class="string">'hello'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$templateCache</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">        restrict:<span class="string">'EAC'</span>,</span></span><br><span class="line"><span class="xml">        template:'<span class="tag">&lt;<span class="name">div</span>&gt;</span>hello world <span class="tag">&lt;<span class="name">ng-transclude</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</span></span><br><span class="line"><span class="javascript">        replace:<span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">        transclude:<span class="literal">true</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>link</code>：<strong>用于与控制器交互</strong>，值为function，function的参数如下</p><ul><li><code>scope</code>：当前指令的作用域</li><li><code>element</code>：当前指令所属元素本身，jquery形式，可以直接使用jquery的方法</li><li><code>attrs</code>：指令元素上或指令所在元素上的属性</li><li><code>ctrl</code>：如果设置<code>require</code>，ctrl代表依赖指令的<code>controller</code>，可以获取依赖指令暴露的方法和数据，否则为<code>undefined</code>。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"ctrl1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hello</span> <span class="attr">done</span>=<span class="string">"world()"</span>&gt;</span>world<span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"ctrl2"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hello</span> <span class="attr">done</span>=<span class="string">"earth()"</span>&gt;</span>earth<span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./angular.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> app=angular.module(<span class="string">'helloModule'</span>,[]);</span></span><br><span class="line"><span class="javascript">  app.controller(<span class="string">'ctrl1'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,$rootScope</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    $rootScope.log=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    $scope.name=<span class="string">'world'</span>;</span></span><br><span class="line"><span class="javascript">    $scope.world=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      alert(<span class="string">'world'</span>)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="javascript">  app.controller(<span class="string">'ctrl2'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,$rootScope</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    $scope.name=<span class="string">'earth'</span>;</span></span><br><span class="line"><span class="javascript">    $scope.earth=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      alert(<span class="string">'earth'</span>)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="javascript">  app.directive(<span class="string">'hello'</span><span class="comment">/*指令名*/</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$templateCache</span>)</span>&#123;<span class="comment">//指令构造函数</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">      restrict:<span class="string">'EACM'</span>,</span></span><br><span class="line"><span class="xml">      template:'<span class="tag">&lt;<span class="name">div</span>&gt;</span>hello <span class="tag">&lt;<span class="name">ng-transclude</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</span></span><br><span class="line"><span class="javascript">      replace:<span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">      transclude:<span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">      link:<span class="function"><span class="keyword">function</span>(<span class="params">scope,ele,attrs</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 为ele绑定click事件</span></span></span><br><span class="line"><span class="javascript">        ele.bind(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">          scope.log()</span></span><br><span class="line"><span class="undefined">          scope.$apply(attrs.done)</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>controller</code>：<strong>通过<code>this</code>暴露数据给其他指令</strong>，值为function，function的参数<code>$scope</code>为当前指令的作用域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">app.directive(<span class="string">'person'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    restrict:<span class="string">'E'</span>,</span><br><span class="line">    <span class="comment">// 需要暴露出去的数据</span></span><br><span class="line">    controller:<span class="function"><span class="keyword">function</span>(<span class="params">$scope<span class="regexp">/*该指令自己的模型*/</span></span>)</span>&#123;</span><br><span class="line">      $scope.style=[];</span><br><span class="line">      <span class="comment">// 暴露add方法</span></span><br><span class="line">      <span class="keyword">this</span>.add=<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">        $scope.style.push(item)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    template:<span class="string">'&lt;div&gt;human&lt;/div&gt;'</span>,</span><br><span class="line">    link:<span class="function"><span class="keyword">function</span>(<span class="params">scope,ele,attrs</span>)</span>&#123;</span><br><span class="line">      ele.bind(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        alert(scope.style)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>require</code>：设置依赖的指令(有依赖的指令时<code>link</code>第四个参数才有值），用法如<code>require:&#39;^person&#39;</code></p></li><li><p><code>scope</code>: 指令每次使用时初始化独立的scope作用域，设置要继承的所在控制器作用域中的方法和变量，用法如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-controller</span>=<span class="string">"ctrl1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">myname</span>=<span class="string">"&#123;&#123;name&#125;&#125;"</span> <span class="attr">person</span> <span class="attr">iage</span>=<span class="string">"age"</span> <span class="attr">age</span>=<span class="string">"&#123;&#123;age&#125;&#125;"</span> <span class="attr">hello</span>=<span class="string">"sayHello(word)"</span>&gt;</span>11<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">person</span> <span class="attr">kind</span> <span class="attr">myname</span>=<span class="string">"&#123;&#123;name&#125;&#125;"</span> <span class="attr">iage</span>=<span class="string">"age"</span> <span class="attr">age</span>=<span class="string">"&#123;&#123;age&#125;&#125;"</span>&gt;</span>22<span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  app.controller(<span class="string">'ctrl1'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    $scope.name=<span class="string">"world"</span></span></span><br><span class="line"><span class="undefined">    $scope.age=23</span></span><br><span class="line"><span class="javascript">    $scope.sayHello=<span class="function"><span class="keyword">function</span>(<span class="params">word</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(word)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="javascript">  app.directive(<span class="string">'person'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      restrict:<span class="string">'E'</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 创建一个独立的scope</span></span></span><br><span class="line"><span class="undefined">      scope:&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 继承指令元素或指令所在元素上myname属性的值</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 简写myname：'@'</span></span></span><br><span class="line"><span class="javascript">        myname:<span class="string">'@myname'</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 把当前的iage指向所属的控制器scope上的属性</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 相当于iage: '=iage'</span></span></span><br><span class="line"><span class="javascript">        iage:<span class="string">'='</span>,</span></span><br><span class="line"><span class="javascript">        age:<span class="string">'@'</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 用来调用所属的控制器scope上的函数</span></span></span><br><span class="line"><span class="javascript">        ihello:<span class="string">'&amp;hello'</span></span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      transclude:<span class="literal">true</span>,</span></span><br><span class="line"><span class="xml">      template:'<span class="tag">&lt;<span class="name">div</span>&gt;</span>human <span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-transclude</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</span></span><br><span class="line"><span class="javascript">      link:<span class="function"><span class="keyword">function</span>(<span class="params">scope,ele,attrs</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(scope.myname);<span class="comment">// 输出结果world</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(scope.iage,scope.age);<span class="comment">// 输出结果为23 23 但是前一个23为number类型，后一个23为string类型</span></span></span><br><span class="line"><span class="javascript">        scope.ihello(&#123;<span class="attr">word</span>:<span class="string">'hello world'</span>&#125;)<span class="comment">// 输出结果hello world</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>如果不设置，则使用同一个scope（即指令的rootScope），继承指令所在控制器作用域的所有方法和变量</li><li><code>@</code>和<code>=</code>方式的继承有区别<ul><li><code>@</code>方式指向元素上属性的值，结果数据类型为字符串，如果是对象会转为JSON字符串</li><li><code>=</code>方式指向所属的控制器的属性，结果数据类型与控制器一致。如果是对象，结果和控制器属性指向同一空间地址</li></ul></li></ul></blockquote></li></ul><h3 id="指令的执行过程"><a href="#指令的执行过程" class="headerlink" title="指令的执行过程"></a>指令的执行过程</h3><ol><li>从<code>ng-app</code>上开始，递归子层DOM元素，收集所有指令</li><li>编译阶段，根据指令中的template templateUrl transclude进行DOM结构的转换，如果指令提供了compile函数也会调用，对模板自身的转换，只会执行一次</li><li>链接阶段，负责模型scope和视图之间的动态关联，执行多次3</li></ol><h2 id="app-run"><a href="#app-run" class="headerlink" title="app.run()"></a>app.run()</h2><p>angularJS加载完所有模块后执行的第一个方法，可用于提取在多个指令里进行复用的内容，如模板等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.run(<span class="function"><span class="keyword">function</span>(<span class="params">$templateCache</span>)</span>&#123;</span><br><span class="line">    $templateCache.put(<span class="string">'hello'</span>,<span class="string">'&lt;div&gt;hello world&lt;/div&gt;'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.directive(<span class="string">'hello'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$templateCache</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">      restrict:<span class="string">'E'</span>,</span><br><span class="line">      template:$templateCache.get(<span class="string">'hello'</span>),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;MVC 双向数据绑定(Model-View-ViewModel)&lt;/li&gt;
&lt;li&gt;模版 将html文件解析到DOM中&lt;/li&gt;
&lt;li&gt;模块化与依赖注入&lt;/li&gt;
&lt;li&gt;指令可以用来创建自定义的标签，也可以用来装饰元素或者操作DOM属性&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;angularJS模板中要使用&lt;code&gt;-&lt;/code&gt;连接命名形式，定义时要使用驼峰命名法&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
      <category term="angular" scheme="http://yoursite.com/categories/JavaScript/angular/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="angular" scheme="http://yoursite.com/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>浏览器解析</title>
    <link href="http://yoursite.com/2019/07/17/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2019/07/17/浏览器解析/</id>
    <published>2019-07-17T06:26:00.000Z</published>
    <updated>2019-07-19T09:36:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>浏览器是方便一般互联网用户通过界面解析和发送HTTP协议的软件</p><blockquote><p>PC端浏览器和移动端浏览器功能基本相同，但运行的操作系统不同，渲染机制有差异<br><a id="more"></a></p></blockquote><h2 id="浏览器的内核"><a href="#浏览器的内核" class="headerlink" title="浏览器的内核"></a>浏览器的内核</h2><p>浏览器中负责将表示页面的字符转变成可视化图像的模块</p><h3 id="远程主机响应（请求网页-http协议）"><a href="#远程主机响应（请求网页-http协议）" class="headerlink" title="远程主机响应（请求网页 http协议）"></a>远程主机响应（请求网页 http协议）</h3><p>http协议</p><ul><li><p>请求报文格式：<code>[请求方式] [请求URL] [HTTP版本]\r\n[首部名称]:[可选空格][首部内容]\r\n[首部名称]:[可选空格][首部内容]\r\n[首部名称]:[可选空格][首部内容]\r\n\r\n[实体]</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'GET / HTTTP/1.0\r\nHost:www.xxxx.cn\r\nUser-Agent: Mozilla/5.0(Macintosh;Intel Mac OS X 10_12_1) AppleWebkit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36\r\nAccept: text/html\r\nAccept-Language:zh_CN,zh;q=0.9\r\n\r\n'</span></span><br></pre></td></tr></table></figure></li><li><p>相应报文格式：<code>[HTTP版本] [状态码] [原因短语]\r\n[首部名称]:[可选空格][首部内容]\r\n[首部名称]:[可选空格][首部内容]\r\n[首部名称]:[可选空格][首部内容]\r\n\r\n[实体]</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="built_in">Date</span>: Wed, <span class="number">25</span> Apr <span class="number">2019</span> <span class="number">12</span>:<span class="number">01</span>:<span class="number">22</span> GMT <span class="comment">// 服务器发送内容时间</span></span><br><span class="line">Server: Apache <span class="comment">// 服务器</span></span><br><span class="line">Last-Modified: Fri, <span class="number">20</span> Apr <span class="number">2018</span> <span class="number">09</span>:<span class="number">13</span>:<span class="number">48</span> GMT <span class="comment">// 网页最后修改时间</span></span><br><span class="line">ETag: <span class="string">"700a6f-f72f-56a441b148b81"</span> <span class="comment">// 强校验码，用于缓存策略</span></span><br><span class="line">Accept-Ranges: bytes <span class="comment">// 范围请求</span></span><br><span class="line">Content-Length: <span class="number">63279</span> <span class="comment">// 实体长度</span></span><br><span class="line">Vary: Accept-Encoding,User-Agent</span><br><span class="line">Connection: close <span class="comment">// 关闭连接</span></span><br><span class="line">Content-Type: text/html <span class="comment">// 实体类型</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="网页内容组成"><a href="#网页内容组成" class="headerlink" title="网页内容组成"></a>网页内容组成</h3><ul><li>doctype：提供浏览器html版本信息，<code>&lt;!doctype html&gt;</code></li><li>head：html头部<ul><li>meta：元数据<ul><li>charset： 此特性声明当前文档所使用的字符编码，<code>&lt;meta chartset=&quot;utf-8&quot;&gt;</code></li><li>http-equiv：客户端行为设置，如渲染模式，缓存等，<code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;</code></li><li>name=”keywords”：搜索引擎使用，SEO优化</li><li>name=”description”：搜索引擎使用，SEO优化</li><li>name=”viewport”：浏览器视口设置，</li></ul></li><li>link：</li><li>script：需要在body前完成加载或运行的脚本</li></ul></li><li>body：html实体<ul><li>script：需要在body解析时加载或运行的脚本</li></ul></li></ul><h3 id="加载资源"><a href="#加载资源" class="headerlink" title="加载资源"></a>加载资源</h3><p>浏览器解析到URL地址时，调用特定的资源加载器，加载不同的外联资源</p><blockquote><p>chrome会在html文件解析过程中进行预扫描，加载其他资源</p></blockquote><ul><li>一般资源加载过程不会阻碍渲染过程，如CSS资源</li><li>javascript资源会阻碍渲染过程，放置在头部会造成进入网页时的短暂白屏</li></ul><blockquote><p>在现代浏览器中，渲染被阻塞时，浏览器会开启新的线程继续渲染</p></blockquote><h3 id="渲染引擎"><a href="#渲染引擎" class="headerlink" title="渲染引擎"></a>渲染引擎</h3><p>渲染引擎的一般渲染过程。虚线表示渲染阶段依赖的外部模块，不属于渲染引擎<br><img src="/2019/07/17/浏览器解析/浏览器解析-20190719-16-47-33.png" alt="渲染过程"></p><ul><li>HTML解释器：解释HTML文件的解释器，DOM树</li><li>CSS解释器：解释级联样式，为DOM对象计算样式信息，CSSOM树</li><li>javascript引擎：解释JS脚本，并使JS代码有调用DOM接口和CSSOM接口的能力</li><li>布局：结构DOM和CSSOM，计算出DOM对象的大小位置信息</li><li>绘图：将经过布局计算的DOM节点绘制成图像</li></ul><blockquote><p>渲染之前需要加载资源，渲染后DOM或CSS变化后，重新进行布局计算和渲染操作</p></blockquote><h3 id="内核架构"><a href="#内核架构" class="headerlink" title="内核架构"></a>内核架构</h3><p><img src="/2019/07/17/浏览器解析/浏览器解析-20190725-17-36-38.png" alt="webkit架构图"></p><h2 id="浏览器内核以外的功能"><a href="#浏览器内核以外的功能" class="headerlink" title="浏览器内核以外的功能"></a>浏览器内核以外的功能</h2><p>基于webkit内核构建浏览器应用，除去内核完成的功能，现代浏览器的工作：</p><ul><li>资源管理</li><li>多页面管理：多标签页的管理</li><li>插件和扩展</li><li>账户和同步</li><li>安全机制</li><li>多系统支持</li></ul><h3 id="Chromium-开源的最新版chrome浏览器-多进程架构"><a href="#Chromium-开源的最新版chrome浏览器-多进程架构" class="headerlink" title="Chromium(开源的最新版chrome浏览器)多进程架构"></a>Chromium(开源的最新版chrome浏览器)多进程架构</h3><p><img src="/2019/07/17/浏览器解析/浏览器解析-20190726-10-09-55.png" alt="Chromium的模块"></p><p>主要进程：</p><ul><li>Browser进程：主进程，负责浏览器界面和页面管理等，调度其他进程，控制其他进程的创建和销毁</li><li>Renderer进程：渲染进程<blockquote><p>打开网页不一定创建一个Renderer进程，看浏览器开发者的配置，可能多个网页一个进程</p></blockquote></li><li>NPAPI插件进程：用于管理如flash插件等</li><li>GPU进程：当GPU硬件加速打开时才会创建</li></ul><blockquote><p>进程间能互相调用，通过IPC通信，不同操作系统的进程通信方法不同（如windows和Linux）</p></blockquote><p>多线程架构的目的：</p><ul><li>职责分离，故障范围小</li><li>隔离性</li><li>性能</li></ul><h2 id="渲染原理"><a href="#渲染原理" class="headerlink" title="渲染原理"></a>渲染原理</h2><ul><li>加载：加载渲染所需html代码</li><li>渲染：将html代码绘制成图像</li></ul><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><h4 id="资源加载机制"><a href="#资源加载机制" class="headerlink" title="资源加载机制"></a>资源加载机制</h4><p>资源加载器</p><ul><li>特定资源加载器：针对每种资源类型的特定加载器，仅加载某一种资源</li><li>缓存资源加载器：<strong>特定加载器</strong>先通过<strong>缓存资源加载器</strong>来查找是否有缓存资源。如果资源缓存池中存在，取出使用，如果不存在，发送请求给网络模块</li><li>通用资源加载器：只负责通过网络获取目标资源的数据，不负责进一步解析</li></ul><blockquote><p>资源缓存</p><ul><li>页面缓存：Page Cache</li><li>内存缓存: Memory Cache</li><li>磁盘缓存: Disk Cache</li></ul></blockquote><h4 id="网络栈"><a href="#网络栈" class="headerlink" title="网络栈"></a>网络栈</h4><p><img src="/2019/07/17/浏览器解析/浏览器解析-20190729-11-30-52.png" alt="网络栈"></p><ul><li>URLRequest：确定请求类型，协议</li><li>URLRequestJob(Http)：判断是否需要建立网络连接（查找缓存）</li><li>HttpNetworkTransaction：建立HTTP事务</li><li>HttpStream：建立TCP socket连接</li><li>StreamSocket</li></ul><h4 id="预加载"><a href="#预加载" class="headerlink" title="预加载"></a>预加载</h4><ul><li>DNS预取：<code>&lt;link rel=&quot;dns-prefetch&quot; href=&quot;&quot;&gt;</code></li><li>资源预取</li><li>TCP preconnect</li></ul><h4 id="提高加载速度"><a href="#提高加载速度" class="headerlink" title="提高加载速度"></a>提高加载速度</h4><h3 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;浏览器是方便一般互联网用户通过界面解析和发送HTTP协议的软件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PC端浏览器和移动端浏览器功能基本相同，但运行的操作系统不同，渲染机制有差异&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="其他" scheme="http://yoursite.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>webpack简单实现</title>
    <link href="http://yoursite.com/2019/07/15/webpack%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/07/15/webpack简单实现/</id>
    <published>2019-07-15T05:18:00.000Z</published>
    <updated>2019-07-17T06:26:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>webpack打包的简单实现<br><a id="more"></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /usr/bin/env node</span></span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">let</span> ejs = <span class="built_in">require</span>(<span class="string">'ejs'</span>);</span><br><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">let</span> entry = <span class="string">'./src/index.js'</span>;</span><br><span class="line"><span class="keyword">let</span> output = <span class="string">'./dist/index.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">styleLoader</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">    content = <span class="built_in">JSON</span>.stringify(content).replace(<span class="regexp">/\\r\\n/g</span>, <span class="string">''</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">    let style =document.getElementsByTagName('style')[0];</span></span><br><span class="line"><span class="string">    if(!style)&#123;</span></span><br><span class="line"><span class="string">        style=document.createElement('style');</span></span><br><span class="line"><span class="string">        document.getElementsByTagName('head')[0].appendChild(style);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    style.innerHTML+=<span class="subst">$&#123;content&#125;</span>;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> modules = [];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extractModules</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> content = fs.readFileSync(name, <span class="string">'utf8'</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/\.css$/</span>.test(name)) &#123;</span><br><span class="line">        content = styleLoader(content);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        content = content.replace(<span class="regexp">/require\(['"](.+?)['"]\)/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> namePath = path.join(name, <span class="string">'../'</span>, <span class="built_in">arguments</span>[<span class="number">1</span>]);</span><br><span class="line">            extractModules(namePath);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`require('<span class="subst">$&#123;namePath&#125;</span>')`</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    modules.push(&#123;</span><br><span class="line">        name,</span><br><span class="line">        content</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extractModules(entry);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> template = <span class="string">`(</span></span><br><span class="line"><span class="string">    function (modules) &#123;</span></span><br><span class="line"><span class="string">        function require(moduleId) &#123;</span></span><br><span class="line"><span class="string">            var module=&#123;</span></span><br><span class="line"><span class="string">                exports:&#123;&#125;</span></span><br><span class="line"><span class="string">            &#125;;</span></span><br><span class="line"><span class="string">            modules[moduleId].call(module.exports,module,module.exports,require)</span></span><br><span class="line"><span class="string">            return module.exports</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        return require("&lt;%-entry%&gt;")</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">)(&#123;</span></span><br><span class="line"><span class="string">    &lt;%for(let i=0;i&lt;modules.length;i++)&#123;%&gt;</span></span><br><span class="line"><span class="string">    "&lt;%-modules[i].name%&gt;":</span></span><br><span class="line"><span class="string">    (function (module,exports,require) &#123;</span></span><br><span class="line"><span class="string">        eval(\`&lt;%-modules[i].content%&gt;\`)</span></span><br><span class="line"><span class="string">    &#125;),</span></span><br><span class="line"><span class="string">    &lt;%&#125;%&gt;</span></span><br><span class="line"><span class="string">&#125;)`</span>;</span><br><span class="line"><span class="keyword">let</span> result = ejs.render(template, &#123;entry, modules&#125;);</span><br><span class="line">fs.writeFileSync(output, result);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'success'</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;webpack打包的简单实现&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="webpack" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/webpack/"/>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>vue的MVVM原理</title>
    <link href="http://yoursite.com/2019/07/12/vue%E7%9A%84MVVM%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2019/07/12/vue的MVVM原理/</id>
    <published>2019-07-12T05:24:00.000Z</published>
    <updated>2019-07-12T05:24:00.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
      <category term="vue" scheme="http://yoursite.com/categories/JavaScript/vue/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>redux-saga</title>
    <link href="http://yoursite.com/2019/07/10/redux-saga/"/>
    <id>http://yoursite.com/2019/07/10/redux-saga/</id>
    <published>2019-07-10T07:36:00.000Z</published>
    <updated>2019-07-10T07:22:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>redux-saga是redux的中间件，用于在redux中处理异步任务，与redux-thunk相比，redux-saga管理更容易，测试更简单</p><p>sages 采用<code>Generator</code>函数（ES6）来 yield Effects<br><a id="more"></a></p><p>Effect 是一个简单的对象，该对象包含了一些给 middleware 解释执行的信息。可以通过使用 effects API 如 <code>fork</code>，<code>call</code>，<code>take</code>，<code>put</code>，<code>cancel</code> 等来创建 Effect。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>$ npm install --save redux-saga</code></p><p>## </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;redux-saga是redux的中间件，用于在redux中处理异步任务，与redux-thunk相比，redux-saga管理更容易，测试更简单&lt;/p&gt;
&lt;p&gt;sages 采用&lt;code&gt;Generator&lt;/code&gt;函数（ES6）来 yield Effects&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
      <category term="Redux" scheme="http://yoursite.com/categories/JavaScript/Redux/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Redux" scheme="http://yoursite.com/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>redux-actions</title>
    <link href="http://yoursite.com/2019/07/03/redux-actions/"/>
    <id>http://yoursite.com/2019/07/03/redux-actions/</id>
    <published>2019-07-03T09:15:00.000Z</published>
    <updated>2019-07-10T07:22:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>redux-actions是redux的中间件，用于简化使用redux的写法<br><a id="more"></a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>npm install --save redux-actions</code></p><h2 id="createAction-s"><a href="#createAction-s" class="headerlink" title="createAction(s)"></a>createAction(s)</h2><p>用于创建action</p><h3 id="createAction创建单个actionCreator"><a href="#createAction创建单个actionCreator" class="headerlink" title="createAction创建单个actionCreator"></a>createAction创建单个actionCreator</h3><p><code>createAction(actionType, payloadCreator, metaCreator)</code>，返回值为function类型（actionCreator），actionCreator执行返回<code>{type,payload,meta,error}</code>（action）。</p><p>参数解释如下</p><ul><li>actionType：必须是字符串类型，并且是唯一一个必要参数</li><li>payloadCreator：必须是null、undefined、function，返回值为action的payload属性值，参数为actionCreator的参数</li><li>metaCreator：payloadCreator：必须是null、undefined、function，返回值为action的meta属性值，参数为actionCreator的参数</li></ul><blockquote><p><code>payload</code>属性为<code>Error</code>对象时，<code>error</code>属性自动为<code>true</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> increment = createAction(<span class="string">'INCREMENT'</span>);</span><br><span class="line">increment(); <span class="comment">// &#123; type: 'INCREMENT' &#125;</span></span><br><span class="line">increment([<span class="number">1</span>, <span class="number">42</span>]); <span class="comment">// &#123; type: 'INCREMENT', payload: [1, 42]  &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> updateAdminUser = createAction(</span><br><span class="line">  <span class="string">'UPDATE_ADMIN_USER'</span>,</span><br><span class="line">  updates =&gt; (-updates),</span><br><span class="line">  (updates) =&gt; (&#123; <span class="attr">admin</span>:updates&gt;<span class="number">-1</span> &#125;)</span><br><span class="line">);</span><br><span class="line">updateAdminUser(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   type: 'UPDATE_ADMIN_USER',</span></span><br><span class="line"><span class="comment">//   payload: -1,</span></span><br><span class="line"><span class="comment">//   meta: &#123; admin: true &#125;,</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> noop = createAction(<span class="string">'NOOP'</span>);</span><br><span class="line"><span class="keyword">const</span> error = <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'not a number'</span>);</span><br><span class="line">noop(error);</span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//  type: 'NOOP',</span></span><br><span class="line"><span class="comment">//  payload: error,</span></span><br><span class="line"><span class="comment">//  error: true</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><h3 id="createActions创建多个actionCreator"><a href="#createActions创建多个actionCreator" class="headerlink" title="createActions创建多个actionCreator"></a>createActions创建多个actionCreator</h3><p><code>createActions(actionMap, ...actionTypes, options)</code>，返回值<code>{[key:actionType]:actionCreator}</code>格式的对象，key符合驼峰命名。</p><p>参数解释如下</p><ul><li>actionMap：对象类型，可以是递归数据结构，key为actionType，值可以为如下几种<ul><li>payloadCreator函数</li><li>payloadCreator和metaCreator组成的数组，metaCreator必须有</li><li>actionMap对象</li></ul></li><li>actionTypes：字符串</li><li>options，可以为actiontype添加前缀<ul><li>prefix: 前缀</li><li>namespace: 分隔符</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">createActions(&#123;&#125;, <span class="string">'INCREMENT'</span>, &#123;</span><br><span class="line">  prefix: <span class="string">'counter'</span>,</span><br><span class="line">  namespace: <span class="string">'--'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// counter--INCREMENT</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actionCreators = createActions(</span><br><span class="line">  &#123;</span><br><span class="line">    APP: &#123;</span><br><span class="line">      COUNTER: &#123;</span><br><span class="line">        INCREMENT: [</span><br><span class="line">          amount =&gt; (&#123; amount &#125;),</span><br><span class="line">          amount =&gt; (&#123; <span class="attr">key</span>: <span class="string">'value'</span>, amount &#125;)</span><br><span class="line">        ],</span><br><span class="line">        DECREMENT: <span class="function"><span class="params">amount</span> =&gt;</span> (&#123; <span class="attr">amount</span>: -amount &#125;),</span><br><span class="line">      &#125;,</span><br><span class="line">      NOTIFY: [</span><br><span class="line">        (username, message) =&gt; (&#123; <span class="attr">message</span>: <span class="string">`<span class="subst">$&#123;username&#125;</span>: <span class="subst">$&#123;message&#125;</span>`</span> &#125;),</span><br><span class="line">        (username, message) =&gt; (&#123; username, message &#125;)</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'ACTION_THREE'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">actionCreators.app.counter.increment(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   type: 'APP/COUNTER/INCREMENT',</span></span><br><span class="line"><span class="comment">//   payload: &#123; amount: 1 &#125;,</span></span><br><span class="line"><span class="comment">//   meta: &#123; key: 'value', amount: 1 &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">actionCreators.app.notify(<span class="string">'yangmillstheory'</span>, <span class="string">'Hello World'</span>);</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   type: 'APP/NOTIFY',</span></span><br><span class="line"><span class="comment">//   payload: &#123; message: 'yangmillstheory: Hello World' &#125;,</span></span><br><span class="line"><span class="comment">//   meta: &#123; username: 'yangmillstheory', message: 'Hello World' &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">actionCreators.actionThree(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   type: 'ACTION_THREE',</span></span><br><span class="line"><span class="comment">//   payload: 3</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h2 id="handleAction-s"><a href="#handleAction-s" class="headerlink" title="handleAction(s)"></a>handleAction(s)</h2><p>reducer</p><h3 id="handleAction创建单个action的reducer"><a href="#handleAction创建单个action的reducer" class="headerlink" title="handleAction创建单个action的reducer"></a>handleAction创建单个action的reducer</h3><p><code>handleAction(type, reducer | reducerMap = Identity, defaultState)</code></p><p>参数解释如下</p><ul><li>type：字符串类型</li><li>reducer：function，处理action</li><li>reducerMap：<code>{next(){},throw(){}}</code>，分别处理正确的action和错误的action</li><li>defaultState：初始state，必须传</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">handleAction(</span><br><span class="line">  <span class="string">'APP/COUNTER/INCREMENT'</span>,</span><br><span class="line">  (state, action) =&gt; (&#123;</span><br><span class="line">    counter: state.counter + action.payload.amount</span><br><span class="line">  &#125;),</span><br><span class="line">  defaultState</span><br><span class="line">);</span><br><span class="line">handleAction(<span class="string">'FETCH_DATA'</span>, &#123;</span><br><span class="line">  next(state, action) &#123;...&#125;,</span><br><span class="line">  <span class="keyword">throw</span>(state, action) &#123;...&#125;,</span><br><span class="line">&#125;, defaultState);</span><br></pre></td></tr></table></figure><h3 id="handleActions创建多个action的reducer"><a href="#handleActions创建多个action的reducer" class="headerlink" title="handleActions创建多个action的reducer"></a>handleActions创建多个action的reducer</h3><p><code>handleActions(reducerMap, defaultState, options);</code>，运用<code>redux-reducers</code></p><blockquote><p><code>combineReducers(...reducers)</code>和<code>reduceReducers(...reducers)</code>的区别</p><ul><li><code>combineReducers</code>，每个reducer维护自己的state</li><li><code>reduceReducers</code>， 每个reducer维护同一个state</li></ul></blockquote><p>参数解释如下</p><ul><li>reducerMap：对象或数组类型</li><li>defaultState：初始state，必须传</li><li>options，对应createActions的options参数<ul><li>prefix: 前缀</li><li>namespace: 分隔符</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> increment = createAction(INCREMENT);</span><br><span class="line"><span class="keyword">const</span> decrement = createAction(DECREMENT);</span><br><span class="line"></span><br><span class="line"><span class="comment">// reducerMap 方式1</span></span><br><span class="line"><span class="keyword">const</span> reducer = handleActions(</span><br><span class="line">  &#123;</span><br><span class="line">    INCREMENT: <span class="function">(<span class="params">state, action</span>) =&gt;</span> (&#123;</span><br><span class="line">      counter: state.counter + action.payload</span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    DECREMENT: <span class="function">(<span class="params">state, action</span>) =&gt;</span> (&#123;</span><br><span class="line">      counter: state.counter - action.payload</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">counter</span>: <span class="number">0</span> &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// reducerMap 方式2</span></span><br><span class="line"><span class="keyword">const</span> reducer = handleActions(</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">    [</span><br><span class="line">      INCREMENT,</span><br><span class="line">      (state, action) =&gt; (&#123;</span><br><span class="line">        counter: state.counter + action.payload</span><br><span class="line">      &#125;)</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    [</span><br><span class="line">      DECREMENT,</span><br><span class="line">      (state, action) =&gt; (&#123;</span><br><span class="line">        counter: state.counter - action.payload</span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  ]),</span><br><span class="line">  &#123; <span class="attr">counter</span>: <span class="number">0</span> &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// reducerMap 方式3</span></span><br><span class="line"><span class="keyword">const</span> reducer = handleActions(</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">    [</span><br><span class="line">      increment,</span><br><span class="line">      (state, action) =&gt; (&#123;</span><br><span class="line">        counter: state.counter + action.payload</span><br><span class="line">      &#125;)</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    [</span><br><span class="line">      decrement,</span><br><span class="line">      (state, action) =&gt; (&#123;</span><br><span class="line">        counter: state.counter - action.payload</span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  ]),</span><br><span class="line">  &#123; <span class="attr">counter</span>: <span class="number">0</span> &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// options</span></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  prefix: <span class="string">'counter'</span>,</span><br><span class="line">  namespace: <span class="string">'--'</span></span><br><span class="line">&#125;</span><br><span class="line">createActions(&#123; ... &#125;, <span class="string">'INCREMENT'</span>, options)</span><br><span class="line">handleActions(&#123; ... &#125;, defaultState, options)</span><br></pre></td></tr></table></figure><h2 id="combineActions"><a href="#combineActions" class="headerlink" title="combineActions"></a>combineActions</h2><p><code>combineActions(...types);</code>，types可以是字符串，symbol类型，actionCreator</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; increment, decrement &#125; = createActions(&#123;</span><br><span class="line">  INCREMENT: <span class="function"><span class="params">amount</span> =&gt;</span> (&#123; amount &#125;),</span><br><span class="line">  DECREMENT: <span class="function"><span class="params">amount</span> =&gt;</span> (&#123; <span class="attr">amount</span>: -amount &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reducer = handleActions(</span><br><span class="line">  &#123;</span><br><span class="line">    [combineActions(increment, decrement)]: (</span><br><span class="line">      state,</span><br><span class="line">      &#123; <span class="attr">payload</span>: &#123; amount &#125; &#125;</span><br><span class="line">    ) =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">counter</span>: state.counter + amount &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">counter</span>: <span class="number">10</span> &#125;</span><br><span class="line">);</span><br><span class="line">reducer(&#123; <span class="attr">counter</span>: <span class="number">5</span> &#125;, increment(<span class="number">5</span>));</span><br><span class="line"><span class="comment">//&#123; counter: 10 &#125;</span></span><br><span class="line">reducer(&#123; <span class="attr">counter</span>: <span class="number">5</span> &#125;, decrement(<span class="number">5</span>));</span><br><span class="line"><span class="comment">// &#123; counter: 0 &#125;</span></span><br><span class="line">reducer(&#123; <span class="attr">counter</span>: <span class="number">5</span> &#125;, &#123; <span class="attr">type</span>: <span class="string">'NOT_TYPE'</span>, <span class="attr">payload</span>: <span class="number">1000</span> &#125;);</span><br><span class="line"><span class="comment">// &#123; counter: 5 &#125;</span></span><br><span class="line">reducer(<span class="literal">undefined</span>, increment(<span class="number">5</span>));</span><br><span class="line"><span class="comment">// &#123; counter: 15 &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;redux-actions是redux的中间件，用于简化使用redux的写法&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
      <category term="Redux" scheme="http://yoursite.com/categories/JavaScript/Redux/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Redux" scheme="http://yoursite.com/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>Typescript</title>
    <link href="http://yoursite.com/2019/06/28/Typescript/"/>
    <id>http://yoursite.com/2019/06/28/Typescript/</id>
    <published>2019-06-28T08:34:00.000Z</published>
    <updated>2019-07-03T09:13:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>TypeScript 是微软开发的JavaScript的超集，主要在JavaScript的基础上添加了可选的静态类型和基于类的面向对象编程</p><ul><li>开源于 GitHub</li><li>可以编译成纯 JavaScript</li><li>TypeScript 编译工具可以运行在任何服务器和任何系统上<a id="more"></a></li></ul><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>增加了代码的可读性和可维护性</p><ul><li>类型系统实际上是最好的文档，大部分的函数看看类型的定义就可以知道如何使用了</li><li>可以在编译阶段就发现大部分错误</li><li>增强编辑器和IDE的功能，包括代码补全、接口提示、跳转到定义、重构等</li><li>对于一个需要长期维护的项目，能够减少其维护成本</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>短期可能会增加一些开发成本</li><li>集成到构建流程需要一些工作量</li><li>可能和一些第三方库结合的不是很完美</li></ul><h2 id="安装及编译"><a href="#安装及编译" class="headerlink" title="安装及编译"></a>安装及编译</h2><ul><li>安装<code>npm install typescript -g</code></li><li>查看版本<code>tsc -v</code></li><li><p>编译<code>tsc hello.ts</code></p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">person: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello, '</span> + person;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> user = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(sayHello(user));</span><br><span class="line"><span class="comment">// 编译结果</span></span><br><span class="line"><span class="comment">// function sayHello(person) &#123;</span></span><br><span class="line"><span class="comment">//     return 'Hello, ' + person;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// var user = [0, 1, 2];</span></span><br><span class="line"><span class="comment">// console.log(sayHello(user));</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>TypeScript只会进行静态检查，编译报错时，还是会生成编译结果js文件</p><p>编译报错终止js文件生成，可以在<code>tsconfig.json</code>中配置 <code>noEmitOnError</code></p></blockquote><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="原始数据类型"><a href="#原始数据类型" class="headerlink" title="原始数据类型"></a>原始数据类型</h3><h4 id="布尔值boolean"><a href="#布尔值boolean" class="headerlink" title="布尔值boolean"></a>布尔值boolean</h4><ul><li>Typescript中，构造函数 <code>Boolean</code>创造的对象，不是boolean类型，而是Boolean对象</li><li>Typescript中，直接调用 Boolean返回的是boolean类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isHappy:<span class="built_in">boolean</span>=<span class="literal">true</span>; <span class="comment">// var isHappy=true;</span></span><br><span class="line"><span class="keyword">let</span> isSad:<span class="built_in">boolean</span>=<span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="number">0</span>);<span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> isCry:<span class="built_in">boolean</span>=<span class="built_in">Boolean</span>(<span class="number">1</span>); <span class="comment">// var isCry=Boolean(1);</span></span><br></pre></td></tr></table></figure><h4 id="数值number"><a href="#数值number" class="headerlink" title="数值number"></a>数值number</h4><ul><li>二进制和八进制表示法，会被编译为十进制数字，而十六进制不会</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> decLiteral: <span class="built_in">number</span> = <span class="number">6</span>;<span class="comment">// var decLiteral = 6;</span></span><br><span class="line"><span class="keyword">let</span> hexLiteral: <span class="built_in">number</span> = <span class="number">0xf00d</span>;<span class="comment">//var hexLiteral = 0xf00d;</span></span><br><span class="line"><span class="comment">// ES6 中的二进制表示法</span></span><br><span class="line"><span class="keyword">let</span> binaryLiteral: <span class="built_in">number</span> = <span class="number">0b1010</span>;<span class="comment">//var binaryLiteral = 10;</span></span><br><span class="line"><span class="comment">// ES6 中的八进制表示法</span></span><br><span class="line"><span class="keyword">let</span> octalLiteral: <span class="built_in">number</span> = <span class="number">0o744</span>;<span class="comment">//var octalLiteral = 484;</span></span><br><span class="line"><span class="keyword">let</span> notANumber: <span class="built_in">number</span> = <span class="literal">NaN</span>;<span class="comment">//var notANumber = NaN;</span></span><br><span class="line"><span class="keyword">let</span> infinityNumber: <span class="built_in">number</span> = <span class="literal">Infinity</span>;<span class="comment">//var infinityNumber = Infinity;</span></span><br></pre></td></tr></table></figure><h4 id="字符串string"><a href="#字符串string" class="headerlink" title="字符串string"></a>字符串string</h4><ul><li>模板字符串也是string类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myName: <span class="built_in">string</span> = <span class="string">'Tom'</span>;</span><br><span class="line"><span class="keyword">let</span> myAge: <span class="built_in">number</span> = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模板字符串</span></span><br><span class="line"><span class="keyword">let</span> sentence: <span class="built_in">string</span> = <span class="string">`Hello, my name is <span class="subst">$&#123;myName&#125;</span>.</span></span><br><span class="line"><span class="string">I'll be <span class="subst">$&#123;myAge + 1&#125;</span> years old next month.`</span>;</span><br></pre></td></tr></table></figure><h4 id="空值void"><a href="#空值void" class="headerlink" title="空值void"></a>空值void</h4><ul><li>void类型，只能赋值<code>undefined</code>或<code>null</code></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">alertName</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    alert(<span class="string">'My name is Tom'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> unusable: <span class="built_in">void</span> = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><h4 id="null和undefined"><a href="#null和undefined" class="headerlink" title="null和undefined"></a>null和undefined</h4><blockquote><p>undefined 和 null 是除了never其他所有类型的子类型</p></blockquote><ul><li><p>null类型，只能赋值<code>null</code></p><blockquote><p>null类型的值能赋值给<strong>除了undefined、never类型以外</strong>的所有类型</p></blockquote>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></li><li><p>undefined类型，只能赋值<code>undefined</code></p><blockquote><p>undefined类型的值能赋值给<strong>除了null、never类型以外</strong>的所有类型</p></blockquote>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure></li></ul><h4 id="symbol"><a href="#symbol" class="headerlink" title="symbol"></a>symbol</h4><p>ES6中symbol类型</p><h3 id="非原始类型object"><a href="#非原始类型object" class="headerlink" title="非原始类型object"></a>非原始类型object</h3><p>表示非原始类型，也就是除<code>number</code>，<code>string</code>，<code>boolean</code>，<code>symbol</code>，<code>null</code>或<code>undefined</code>之外的类型。<br><code>let aa:object={aaa:111}</code>通过</p><h3 id="任意类型any"><a href="#任意类型any" class="headerlink" title="任意类型any"></a>任意类型any</h3><ul><li>any类型，允许赋值任意类型的值</li><li>any类型上，访问任何属和调用任何方法都是允许的</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> anyThing: <span class="built_in">any</span> = <span class="string">'hello'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(anyThing.myName);</span><br><span class="line">anyThing.setName(<span class="string">'Jerry'</span>).sayHello();</span><br></pre></td></tr></table></figure><h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h3><p>联合类型使用<code>|</code>分隔每个类型，表示赋值可以为多种类型中的一种。如<code>let myFavoriteNumber: string | number;</code></p><h4 id="访问联合类型的属性或方法"><a href="#访问联合类型的属性或方法" class="headerlink" title="访问联合类型的属性或方法"></a>访问联合类型的属性或方法</h4><ul><li><p>联合类型的变量没有赋值时，只能访问该变量的所有类型里共有的属性或方法</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>(<span class="params">something: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="comment">//不能访问something.length，length不是number的属性</span></span><br><span class="line">    <span class="keyword">return</span> something.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>联合类型的变量赋值时，会根据类型推论的规则推断出一个类型</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myFavoriteNumber: <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line">myFavoriteNumber = <span class="string">'seven'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(myFavoriteNumber.length); <span class="comment">// 通过</span></span><br><span class="line">myFavoriteNumber = <span class="number">7</span>;</span><br><span class="line"><span class="built_in">console</span>.log(myFavoriteNumber.length); <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><h4 id="类型的别名"><a href="#类型的别名" class="headerlink" title="类型的别名"></a>类型的别名</h4><p>我们使用<code>type</code> 创建类型别名，<strong>类型别名常用于联合类型</strong>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Name = <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">type</span> NameResolver = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">type</span> NameOrResolver = Name | NameResolver;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">n: NameOrResolver</span>): <span class="title">Name</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> n === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">interface</span> NameResolver&#123;</span><br><span class="line">    ():<span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">n: <span class="built_in">string</span>|NameResolver</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> n === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符串字面量类型"><a href="#字符串字面量类型" class="headerlink" title="字符串字面量类型"></a>字符串字面量类型</h4><p>用<code>type</code>定义字符串字面量类型，来约束取值，只能是某几个字符串中的一个。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> EventNames = <span class="string">'click'</span> | <span class="string">'scroll'</span> | <span class="string">'mousemove'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleEvent</span>(<span class="params">event: EventNames</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line">handleEvent(<span class="string">'scroll'</span>);  <span class="comment">// 通过</span></span><br><span class="line">handleEvent(<span class="string">'dbclick'</span>); <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><h3 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h3><blockquote><p>类数组不是数组类型</p></blockquote><ul><li><p><code>项类型[]</code>，表示数组类型时，数组项中不允许出现其他类型</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ary:<span class="built_in">number</span>[]=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];<span class="comment">// 通过</span></span><br><span class="line">ary.push(<span class="string">'6'</span>);<span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> aryErr:<span class="built_in">number</span>[]=[<span class="number">1</span>,<span class="string">'2'</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];<span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> ary2:(<span class="built_in">number</span>|<span class="built_in">string</span>)[]=[<span class="number">1</span>,<span class="number">2</span>,<span class="string">'3'</span>,<span class="number">4</span>];<span class="comment">// 通过</span></span><br></pre></td></tr></table></figure><blockquote><p>常见用法：<code>any[]</code>表示数组中允许出现任意类型</p></blockquote></li><li><p>数组泛型<code>Array&lt;项类型&gt;</code>，表示数组类型</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ary:<span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt;=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> ary2:<span class="built_in">Array</span>&lt;<span class="built_in">number</span>|<span class="built_in">string</span>&gt;=[<span class="number">1</span>,<span class="number">2</span>,<span class="string">'3'</span>,<span class="number">4</span>];</span><br></pre></td></tr></table></figure></li></ul><h3 id="元组（Tuple）"><a href="#元组（Tuple）" class="headerlink" title="元组（Tuple）"></a>元组（Tuple）</h3><p><code>[第一项类型，第二项类型]</code>，如<code>let xcatliu: [string, number] = [&#39;Xcat Liu&#39;, 25];</code></p><ul><li><p>当赋值或访问一个已知索引的元素时，会得到正确的类型</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xcatliu: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">xcatliu[<span class="number">0</span>] = <span class="string">'Xcat Liu'</span>;</span><br><span class="line">xcatliu[<span class="number">1</span>] = <span class="number">25</span>;</span><br><span class="line">xcatliu[<span class="number">0</span>].slice(<span class="number">1</span>);</span><br><span class="line">xcatliu[<span class="number">1</span>].toFixed(<span class="number">2</span>);</span><br></pre></td></tr></table></figure></li><li><p>可以单独赋值其中的项</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xcatliu: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">xcatliu[<span class="number">1</span>] = <span class="number">2</span>;</span><br></pre></td></tr></table></figure></li><li><p>对元组类型的变量整体进行初始化或者赋值的时候，需要提供所有元组类型中指定的项。</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xcatliu: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">xcatliu = [<span class="string">'Xcat Liu'</span>, <span class="number">25</span>];<span class="comment">// 通过，如果xcatliu =['Xcat Liu']则报错</span></span><br></pre></td></tr></table></figure></li><li><p><strong>越界的元素</strong>被添加时，其类型限制为元组中每个类型的联合类型</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xcatliu: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">xcatliu = [<span class="string">'Xcat Liu'</span>, <span class="number">25</span>];</span><br><span class="line">xcatliu.push(<span class="string">'http://xcatliu.com/'</span>);<span class="comment">// 通过</span></span><br><span class="line">xcatliu.push(<span class="literal">true</span>);<span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="枚举类型enum"><a href="#枚举类型enum" class="headerlink" title="枚举类型enum"></a>枚举类型enum</h3><p>枚举（Enum）类型用于取值被限定在一定范围内的场景，比如一周只能有七天</p><h4 id="普通枚举"><a href="#普通枚举" class="headerlink" title="普通枚举"></a>普通枚举</h4><p>枚举使用<code>enum</code>定义</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// enum Days &#123;Sun, Mon, Tue, Wed, Thu, Fri, Sat&#125;;</span></span><br><span class="line"><span class="comment">// 编译后</span></span><br><span class="line"><span class="keyword">var</span> Days;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">Days</span>) </span>&#123;</span><br><span class="line">    Days[Days[<span class="string">"Sun"</span>] = <span class="number">0</span>] = <span class="string">"Sun"</span>;</span><br><span class="line">    Days[Days[<span class="string">"Mon"</span>] = <span class="number">1</span>] = <span class="string">"Mon"</span>;</span><br><span class="line">    Days[Days[<span class="string">"Tue"</span>] = <span class="number">2</span>] = <span class="string">"Tue"</span>;</span><br><span class="line">    Days[Days[<span class="string">"Wed"</span>] = <span class="number">3</span>] = <span class="string">"Wed"</span>;</span><br><span class="line">    Days[Days[<span class="string">"Thu"</span>] = <span class="number">4</span>] = <span class="string">"Thu"</span>;</span><br><span class="line">    Days[Days[<span class="string">"Fri"</span>] = <span class="number">5</span>] = <span class="string">"Fri"</span>;</span><br><span class="line">    Days[Days[<span class="string">"Sat"</span>] = <span class="number">6</span>] = <span class="string">"Sat"</span>;</span><br><span class="line">&#125;)(Days || (Days = &#123;&#125;));</span><br></pre></td></tr></table></figure><p>因此，枚举成员会被默认赋值为从<code>0</code>开始递增的数字，并且会对枚举值到枚举名进行反向映射</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Days &#123;Sun, Mon, Tue, Wed, Thu, Fri, Sat&#125;;</span><br><span class="line"><span class="keyword">let</span> sat: Days = Days.Sat;<span class="comment">// 通过</span></span><br><span class="line"><span class="keyword">let</span> sun:<span class="built_in">number</span>=Days.Sun;<span class="comment">// 通过</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="string">"Sun"</span>] === <span class="number">0</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="string">"Sat"</span>] === <span class="number">6</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="number">0</span>] === <span class="string">"Sun"</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="number">6</span>] === <span class="string">"Sat"</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h5 id="手动赋值"><a href="#手动赋值" class="headerlink" title="手动赋值"></a>手动赋值</h5><p>可以给枚举项手动赋值，未手动赋值的枚举项会接着上一个枚举项递增<code>1</code>，值可以重复，反向映射的枚举值的取值会被后面的枚举名覆盖</p><ul><li>第一个枚举项未手动赋值，则赋值为<code>0</code></li><li>手动赋值可以为小数或负数，未手动赋值的枚举项仍会接着上一个枚举项递增<code>1</code></li><li>手动赋值的枚举项可以不是数字，但需要使用类型断言来让 tsc 无视类型检查，并且如果后面有相邻的枚举项，也要手动赋值</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Days &#123;Sun = <span class="number">3</span>, Mon = <span class="number">1</span>, Tue, Wed, Thu, Fri, Sat= &lt;<span class="built_in">any</span>&gt;<span class="string">"S"</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="string">"Sun"</span>] === <span class="number">3</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="string">"Wed"</span>] === <span class="number">3</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="number">3</span>] === <span class="string">"Sun"</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="number">3</span>] === <span class="string">"Wed"</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="string">'S'</span>] === <span class="string">"Sat"</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h5 id="常数项和计算所得项"><a href="#常数项和计算所得项" class="headerlink" title="常数项和计算所得项"></a>常数项和计算所得项</h5><p>枚举项有两种类型：常数项（constant member）和计算所得项（computed member）。</p><ul><li>常数项<ul><li>未手动赋值的枚举成员</li><li>使用常数枚举表达式手动赋值的枚举成员，常数枚举表达式可以在编译阶段求值，类型如下<ul><li>数字字面量</li><li>引用其他的常数枚举成员（可以是不同的枚举类型中的）</li><li><code>+</code>, <code>-</code>, <code>~</code>一元运算符应用于常数枚举表达式</li><li><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code>, <code>&amp;</code>, <code>|</code>, <code>^</code>二元运算符，常数枚举表达式做为其一个操作对象。求值结果为<code>NaN</code>或<code>Infinity</code>，会在编译阶段报错</li></ul></li></ul></li><li>非常数项的枚举成员都是计算所得项</li></ul><h4 id="常数枚举"><a href="#常数枚举" class="headerlink" title="常数枚举"></a>常数枚举</h4><p>使用<code>const enum</code>定义的枚举类型</p><blockquote><p>常数枚举与普通枚举的区别是，它会在编译阶段被删除，并且不能包含计算成员</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> Directions &#123;</span><br><span class="line">    Up,</span><br><span class="line">    Down,</span><br><span class="line">    Left,</span><br><span class="line">    Right</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> directions = [Directions.Up, Directions.Down, Directions.Left, Directions.Right];</span><br><span class="line"><span class="comment">// 编译为</span></span><br><span class="line"><span class="comment">// var directions = [0 /* Up */, 1 /* Down */, 2 /* Left */, 3 /* Right */];</span></span><br></pre></td></tr></table></figure><h4 id="外部枚举"><a href="#外部枚举" class="headerlink" title="外部枚举"></a>外部枚举</h4><p>使用<code>declare enum</code>定义的枚举类型</p><blockquote><p><code>declare</code>定义的类型只会用于编译时的检查，编译结果中会被删除。外部枚举常出现在声明文件中，可以同时使用<code>declare</code>和<code>const</code></p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">enum</span> Directions &#123;</span><br><span class="line">    Up,</span><br><span class="line">    Down,</span><br><span class="line">    Left,</span><br><span class="line">    Right</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> directions = [Directions.Up, Directions.Down, Directions.Left, Directions.Right];</span><br><span class="line"><span class="comment">// 编译结果</span></span><br><span class="line"><span class="comment">// var directions = [Directions.Up, Directions.Down, Directions.Left, Directions.Right];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 同时使用 declare 和 const 也是可以的</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> <span class="keyword">enum</span> Directions &#123;</span><br><span class="line">    Up,</span><br><span class="line">    Down,</span><br><span class="line">    Left,</span><br><span class="line">    Right</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> directions = [Directions.Up, Directions.Down, Directions.Left, Directions.Right];</span><br><span class="line"><span class="comment">// 编译结果</span></span><br><span class="line"><span class="keyword">var</span> directions = [<span class="number">0</span> <span class="comment">/* Up */</span>, <span class="number">1</span> <span class="comment">/* Down */</span>, <span class="number">2</span> <span class="comment">/* Left */</span>, <span class="number">3</span> <span class="comment">/* Right */</span>];</span><br></pre></td></tr></table></figure><h3 id="never"><a href="#never" class="headerlink" title="never"></a>never</h3><p>never类型，表示永不存在的值的类型，一般用来给没有返回值的函数表达式指定返回值类型。</p><blockquote><p>never 是其他类型 （包括 null 和 undefined）的子类型</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> aa:never;</span><br><span class="line">aa=<span class="function">(<span class="params">(<span class="params"></span>)=&gt;&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="params">'错误'</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span>)<span class="params">()</span>;</span></span><br><span class="line"><span class="function"><span class="params">function</span> <span class="params">error</span><span class="params">()</span>:<span class="params">never</span>&#123;</span></span><br><span class="line"><span class="function">    <span class="params">throw</span> <span class="params">new</span> <span class="params">Error</span>(<span class="params">'错误'</span>);</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="类型推论（Type-Inference）"><a href="#类型推论（Type-Inference）" class="headerlink" title="类型推论（Type Inference）"></a>类型推论（Type Inference）</h2><ul><li>在声明变量并赋值时，默认(未指定其类型时)依照类型推论的规则指定一个类型。</li><li>在声明变量并且没有赋值时，默认(未指定其类型时)为任意值类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myFavoriteNumber = <span class="string">'seven'</span>;<span class="comment">// 等价于 let myFavoriteNumber: string = 'seven';</span></span><br><span class="line"><span class="keyword">let</span> something;<span class="comment">// 等价于 let something: any;</span></span><br></pre></td></tr></table></figure><h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><p>将一个变量指定为一个更加具体的类型，<strong>可以解决联合类型只能访问所有类型里共有的属性或方法的问题</strong>，有两种语法形式</p><blockquote><p>类型断言不是类型转换，断言成一个联合类型中<strong>不存在的类型或非子类型是不允许的</strong></p></blockquote><ul><li><p><code>&lt;类型&gt;变量</code>，<strong>jsx语法中不能使用这种</strong></p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>(<span class="params">something: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((&lt;<span class="built_in">string</span>&gt;something).length) &#123;</span><br><span class="line">        <span class="keyword">return</span> (&lt;<span class="built_in">string</span>&gt;something).length;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> something.toString().length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> someValue:<span class="built_in">string</span>= <span class="string">"this is a string"</span>;</span><br><span class="line"><span class="keyword">let</span> strLength: <span class="built_in">number</span> = &lt;<span class="literal">null</span>&gt;someValue;<span class="comment">//通过，如果let strLength: number = someValue;报错</span></span><br></pre></td></tr></table></figure></li><li><p><code>变量 as 类型</code>，<strong>jsx语法中只能使用这种</strong></p></li></ul><h2 id="函数的类型定义"><a href="#函数的类型定义" class="headerlink" title="函数的类型定义"></a>函数的类型定义</h2><p>函数的输入和输出都要进行约束，类型定义</p><blockquote><p>输入多的或者少的参数，都是不被允许的</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">sum(<span class="number">1</span>);<span class="comment">// 报错</span></span><br><span class="line">sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);<span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 表达式</span></span><br><span class="line"><span class="comment">// 只对=右侧匿名函数进行了类型定义，左侧变量通过类型推论得出类型</span></span><br><span class="line"><span class="keyword">let</span> mySum = <span class="function"><span class="keyword">function</span> (<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 手动给变量添加类型</span></span><br><span class="line"><span class="comment">// 与箭头函数毫无关系</span></span><br><span class="line"><span class="keyword">let</span> mySum: <span class="function">(<span class="params">one: <span class="built_in">number</span>, two: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="function"><span class="keyword">function</span> (<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口定义</span></span><br><span class="line"><span class="keyword">interface</span> ISum&#123;</span><br><span class="line">    (one:<span class="built_in">number</span>,two:<span class="built_in">number</span>):<span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> otherSum:ISum;</span><br><span class="line">otherSum=<span class="function"><span class="keyword">function</span> (<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p>可选参数，以<code>?</code>表示，<strong>可选参数后面不允许再出现必须参数</strong></p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName?: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (lastName) &#123;</span><br><span class="line">         <span class="keyword">return</span> firstName + <span class="string">' '</span> + lastName;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> firstName;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">let</span> tomcat = buildName(<span class="string">'Tom'</span>, <span class="string">'Cat'</span>);</span><br><span class="line"> <span class="keyword">let</span> tom = buildName(<span class="string">'Tom'</span>);</span><br></pre></td></tr></table></figure></li><li><p>参数默认值，<strong>添加了默认值的参数会被识别为可选参数，并且其后面可以出现必须参数</strong></p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function buildName(firstName: string = 'Tom', lastName: string) &#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">' '</span> + lastName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> tomcat = buildName(<span class="string">'Tom'</span>, <span class="string">'Cat'</span>);</span><br><span class="line"><span class="keyword">let</span> cat = buildName(<span class="literal">undefined</span>, <span class="string">'Cat'</span>);</span><br></pre></td></tr></table></figure></li><li><p>剩余参数，以用数组类型来定义，<strong>剩余参数只能是最后一个参数</strong></p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">array: <span class="built_in">any</span>[], ...items: <span class="built_in">any</span>[]</span>) </span>&#123;</span><br><span class="line">    items.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">        array.push(item);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = [];</span><br><span class="line">push(a, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><p>允许一个函数输入不同数量或类型的参数时，作出不同的处理</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">x: <span class="built_in">number</span></span>): <span class="title">number</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">x: <span class="built_in">string</span></span>): <span class="title">string</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">x: <span class="built_in">number</span> | <span class="built_in">string</span></span>): <span class="title">number</span> | <span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">'number'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Number</span>(x.toString().split(<span class="string">''</span>).reverse().join(<span class="string">''</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Number</span>(x.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> aa:<span class="built_in">number</span>=reverse(<span class="string">'s'</span>);<span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> aa:<span class="built_in">string</span>=reverse(<span class="string">'s'</span>);<span class="comment">// 通过</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>优先从最前面的函数定义开始匹配</strong>，所以多个函数定义如果有包含关系，需要优先把精确的定义写在前面。</p></blockquote><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="描述对象形状"><a href="#描述对象形状" class="headerlink" title="描述对象形状"></a>描述对象形状</h3><p>用接口（Interfaces）来定义对象的类型。</p><blockquote><p>接口名称一般首字母大写（最好以<code>I</code>为前缀）</p></blockquote><p>赋值的时候，变量的形状必须和接口的形状保持一致（除了可选属性以外，变量的属性必须与接口的一致）</p><ul><li><p>确定属性</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义接口Person</span></span><br><span class="line"><span class="keyword">interface</span> Person&#123;</span><br><span class="line">    name:stiring;</span><br><span class="line">    age:<span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义对象数据类型</span></span><br><span class="line"><span class="keyword">let</span> tom:Person=&#123;</span><br><span class="line">    name:<span class="string">'Tom'</span>,</span><br><span class="line">    age:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 变量不能比接口少属性，也不能多</span></span><br><span class="line"><span class="keyword">let</span> amy:Person=&#123;</span><br><span class="line">    name:<span class="string">'Amy'</span></span><br><span class="line">&#125;<span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li><li><p>可选属性，以<code>?</code>表示，表示该属性可以不存在</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;<span class="comment">// 可选属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line">    name: <span class="string">'Tom'</span>,</span><br><span class="line">    age: <span class="number">25</span>,</span><br><span class="line">    gender: <span class="string">'male'</span><span class="comment">// 报错</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> amy:Person=&#123;</span><br><span class="line">    name:<span class="string">'Amy'</span></span><br><span class="line">&#125;;<span class="comment">// 通过</span></span><br></pre></td></tr></table></figure></li><li><p>任意属性，<code>[propName: string]</code>定义键为string类型</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">    [x: <span class="built_in">string</span>]: <span class="built_in">string</span>|<span class="built_in">number</span>;</span><br><span class="line">&#125;<span class="comment">// 通过</span></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line">    name: <span class="string">'Tom'</span>,</span><br><span class="line">    gender: <span class="string">'male'</span></span><br><span class="line">&#125;;<span class="comment">// 通过</span></span><br><span class="line"><span class="keyword">interface</span> Dog=&#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">    [y:<span class="built_in">string</span>]:<span class="built_in">string</span>;</span><br><span class="line">&#125;<span class="comment">// 报错</span></span><br><span class="line"><span class="comment">// 确定属性和可选属性的类型必须是任意属性类型的子集</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集</p></blockquote><ul><li><p>只读属性，以<code>readonly</code>表示，表示属性只能在对象创建的时候被赋值，之后不能修改</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    readonly id?: <span class="built_in">number</span>;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">    [propName: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line">    <span class="comment">// id: 89757,</span></span><br><span class="line">    name: <span class="string">'Tom'</span>,</span><br><span class="line">    gender: <span class="string">'male'</span></span><br><span class="line">&#125;;<span class="comment">// 通过</span></span><br><span class="line">tom.id = <span class="number">9527</span>; <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li><li><p>描述数组形状，<code>[index:number]</code>定义键为number类型</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> INumberArray&#123;</span><br><span class="line">    [index:<span class="built_in">number</span>]:<span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> ary:INumberArray=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br></pre></td></tr></table></figure></li><li><p>描述函数形状</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ISum&#123;</span><br><span class="line">    (one:<span class="built_in">number</span>,two:<span class="built_in">number</span>):<span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> otherSum:ISum;</span><br><span class="line">otherSum=<span class="function"><span class="keyword">function</span> (<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="抽象类的部分行为"><a href="#抽象类的部分行为" class="headerlink" title="抽象类的部分行为"></a>抽象类的部分行为</h3><p>用<code>implements</code>关键字来把类之间的共有特性提取成接口</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Alarm &#123;</span><br><span class="line">    alert();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Light &#123;</span><br><span class="line">    lightOn();</span><br><span class="line">    lightOff();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Door &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> SecurityDoor <span class="keyword">extends</span> Door <span class="keyword">implements</span> Alarm &#123;</span><br><span class="line">    alert() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'SecurityDoor alert'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Car <span class="keyword">implements</span> Alarm,Light &#123;</span><br><span class="line">    alert() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Car alert'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    lightOn() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Car light on'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    lightOff() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Car light off'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="混合类型接口"><a href="#混合类型接口" class="headerlink" title="混合类型接口"></a>混合类型接口</h3><p>函数可以有自己的属性和方法，需要混合类型接口</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Counter &#123;</span><br><span class="line">    (start: <span class="built_in">number</span>): <span class="built_in">string</span>;</span><br><span class="line">    interval: <span class="built_in">number</span>;</span><br><span class="line">    reset(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCounter</span>(<span class="params"></span>): <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> counter = &lt;Counter&gt;<span class="function"><span class="keyword">function</span> (<span class="params">start: <span class="built_in">number</span></span>) </span>&#123; &#125;;</span><br><span class="line">    counter.interval = <span class="number">123</span>;</span><br><span class="line">    counter.reset = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;;</span><br><span class="line">    <span class="keyword">return</span> counter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = getCounter();</span><br><span class="line">c(<span class="number">10</span>);</span><br><span class="line">c.reset();</span><br><span class="line">c.interval = <span class="number">5.0</span>;</span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>使用<code>extends</code></p><ul><li><p>接口继承接口，接口之间可以是继承关系</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Alarm &#123;</span><br><span class="line">    alert();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> LightableAlarm <span class="keyword">extends</span> Alarm &#123;</span><br><span class="line">    lightOn();</span><br><span class="line">    lightOff();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Car <span class="keyword">implements</span> LightableAlarm&#123;</span><br><span class="line">    lightOff() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    lightOn() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    alert() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接口继承类</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Point &#123;</span><br><span class="line">    x: <span class="built_in">number</span>;</span><br><span class="line">    y: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Point3d <span class="keyword">extends</span> Point &#123;</span><br><span class="line">    z: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> point3d: Point3d = &#123;x: <span class="number">1</span>, y: <span class="number">2</span>, z: <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>TypeScript的类中可以使用三种访问修饰符</p><ul><li><p><code>public</code>: 修饰的属性或方法是公有的，可以在任何地方被访问到</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">public</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Animal(<span class="string">'Jack'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a.name); <span class="comment">// Jack</span></span><br><span class="line">a.name = <span class="string">'Tom'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.name); <span class="comment">// Tom</span></span><br></pre></td></tr></table></figure></li><li><p><code>private</code>：修饰的属性或方法是私有的，不能在声明它的类的外部访问（子类不能访问）</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">private</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Animal(<span class="string">'Jack'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a.name); <span class="comment">// 报错</span></span><br><span class="line">a.name = <span class="string">'Tom'</span>;<span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">class</span> Cat <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);<span class="comment">// 报错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>protected</code>：修饰的属性或方法是受保护的，它和<code>private</code>的区别是它在子类中允许被访问</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">protected</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Cat <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name); <span class="comment">// 通过</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p><code>abstract</code>用于定义<strong>抽象类*</strong>和<strong>其中的抽象方法</strong>。</p><blockquote><p>即使是抽象方法，TypeScript的编译结果中，仍然会存在这个类</p></blockquote><ul><li><p>抽象类不允许被实例化</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">public</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> sayHi();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Animal(<span class="string">'Jack'</span>);<span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li><li><p>抽象类中的抽象方法必须被子类实现</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">public</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> sayHi();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Cat <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    <span class="keyword">public</span> sayHi() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`Meow, My name is <span class="subst">$&#123;this.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> cat = <span class="keyword">new</span> Cat(<span class="string">'Tom'</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="类的类型"><a href="#类的类型" class="headerlink" title="类的类型"></a>类的类型</h3><p>与接口类似</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    sayHi(): <span class="built_in">string</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`My name is <span class="subst">$&#123;this.name&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a: Animal = <span class="keyword">new</span> Animal(<span class="string">'Jack'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a.sayHi());</span><br></pre></td></tr></table></figure><h2 id="泛型（Generics）"><a href="#泛型（Generics）" class="headerlink" title="泛型（Generics）"></a>泛型（Generics）</h2><p>泛型，指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。用<code>&lt;类型参数&gt;</code>定义</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createArray</span>&lt;<span class="title">T</span>&gt;(<span class="params">length: <span class="built_in">number</span>, value: T</span>): <span class="title">Array</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result: T[] = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        result[i] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">createArray&lt;<span class="built_in">string</span>&gt;(<span class="number">3</span>, <span class="string">'x'</span>); <span class="comment">// ['x', 'x', 'x']</span></span><br></pre></td></tr></table></figure><h3 id="泛型的类型参数"><a href="#泛型的类型参数" class="headerlink" title="泛型的类型参数"></a>泛型的类型参数</h3><ul><li><p>多个类型参数</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>&lt;<span class="title">T</span>, <span class="title">U</span>&gt;(<span class="params">tuple: [T, U]</span>): [<span class="title">U</span>, <span class="title">T</span>] </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [tuple[<span class="number">1</span>], tuple[<span class="number">0</span>]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">swap([<span class="number">7</span>, <span class="string">'seven'</span>]); <span class="comment">// ['seven', 7]</span></span><br></pre></td></tr></table></figure></li><li><p>类型参数能指定默认值。使用泛型时，没有指定类型参数值，类型推测也无法得出，默认类型就会起作用。</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createArray</span>&lt;<span class="title">T</span> = <span class="title">string</span>&gt;(<span class="params">length: <span class="built_in">number</span>, value: T</span>): <span class="title">Array</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result: T[] = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        result[i] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h3><p>使用了<code>extends</code>约束了泛型必须符合接口的形状</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Lengthwise &#123;</span><br><span class="line">    length: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Lengthwise</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg.length);</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line">loggingIdentity(<span class="number">7</span>);<span class="comment">// 报错</span></span><br><span class="line">loggingIdentity(<span class="string">'s'</span>);<span class="comment">// 通过</span></span><br><span class="line">loggingIdentity(&#123;name:<span class="string">'aaa'</span>,length:<span class="number">6</span>&#125;;<span class="comment">// 通过</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>多个类型参数之间也可以互相约束</strong></p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保证了 U 上不会出现 T 中不存在的字段</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copyFields</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">U</span>, <span class="title">U</span>&gt;(<span class="params">target: T, source: U</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> id <span class="keyword">in</span> source) &#123;</span><br><span class="line">        target[id] = (&lt;T&gt;source)[id];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = &#123; a: <span class="number">1</span>, b: <span class="number">2</span>, c: <span class="number">3</span>, d: <span class="number">4</span> &#125;;</span><br><span class="line">copyFields(x, &#123; b: <span class="number">10</span>, d: <span class="number">20</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><p>泛型可以用于接口的类型定义中</p><ul><li><p>可以使用含有泛型的接口来定义函数的形状</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> CreateArrayFunc &#123;</span><br><span class="line">    &lt;T&gt;(length: <span class="built_in">number</span>, value: T): <span class="built_in">Array</span>&lt;T&gt;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> createArray: CreateArrayFunc;</span><br><span class="line">createArray = <span class="function"><span class="keyword">function</span>&lt;<span class="title">T</span>&gt;(<span class="params">length: <span class="built_in">number</span>, value: T</span>): <span class="title">Array</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result: T[] = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        result[i] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">createArray(<span class="number">3</span>, <span class="string">'x'</span>); <span class="comment">// ['x', 'x', 'x']</span></span><br></pre></td></tr></table></figure></li><li><p>可以把泛型参数提前到接口名上</p><blockquote><p>使用时，需要定义泛型的类型</p></blockquote>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> CreateArrayFunc&lt;T&gt; &#123;</span><br><span class="line">    (length: <span class="built_in">number</span>, value: T): <span class="built_in">Array</span>&lt;T&gt;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> createArray: CreateArrayFunc&lt;<span class="built_in">any</span>&gt;;</span><br><span class="line">createArray = <span class="function"><span class="keyword">function</span>&lt;<span class="title">T</span>&gt;(<span class="params">length: <span class="built_in">number</span>, value: T</span>): <span class="title">Array</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result: T[] = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        result[i] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">createArray(<span class="number">3</span>, <span class="string">'x'</span>); <span class="comment">// ['x', 'x', 'x']</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><p>泛型可以用于类的类型定义中</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> GenericNumber&lt;T&gt; &#123;</span><br><span class="line">    zeroValue: T;</span><br><span class="line">    add: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myGenericNumber = <span class="keyword">new</span> GenericNumber&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line">myGenericNumber.zeroValue = <span class="number">0</span>;</span><br><span class="line">myGenericNumber.add = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123; <span class="keyword">return</span> x + y; &#125;;</span><br></pre></td></tr></table></figure><h2 id="声明合并"><a href="#声明合并" class="headerlink" title="声明合并"></a>声明合并</h2><p>定义了两个相同名字的函数、接口或类，会合并成一个类型</p><h3 id="函数的声明合并"><a href="#函数的声明合并" class="headerlink" title="函数的声明合并"></a>函数的声明合并</h3><p>使用重载定义多个函数类型，会合并成一个类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">x: <span class="built_in">number</span></span>): <span class="title">number</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">x: <span class="built_in">string</span></span>): <span class="title">string</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">x: <span class="built_in">number</span> | <span class="built_in">string</span></span>): <span class="title">number</span> | <span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">'number'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Number</span>(x.toString().split(<span class="string">''</span>).reverse().join(<span class="string">''</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口的声明合并"><a href="#接口的声明合并" class="headerlink" title="接口的声明合并"></a>接口的声明合并</h3><ul><li>接口中方法的合并，与函数的合并一样</li><li><strong>合并的属性可以重复，但属性的类型必须是一致的</strong></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Alarm &#123;</span><br><span class="line">    price: <span class="built_in">number</span>;</span><br><span class="line">    alert(s: <span class="built_in">string</span>): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Alarm &#123;</span><br><span class="line">    price: <span class="built_in">number</span>;<span class="comment">// 如果是price: string; 则报错</span></span><br><span class="line">    weight: <span class="built_in">number</span>;</span><br><span class="line">    alert(s: <span class="built_in">string</span>, n: <span class="built_in">number</span>): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="comment">// interface Alarm &#123;</span></span><br><span class="line"><span class="comment">//    price: number;</span></span><br><span class="line"><span class="comment">//    weight: number;</span></span><br><span class="line"><span class="comment">//    alert(s: string): string;</span></span><br><span class="line"><span class="comment">//    alert(s: string, n: number): string;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h3 id="类的合并"><a href="#类的合并" class="headerlink" title="类的合并"></a>类的合并</h3><p>类的合并与接口的合并规则一致。</p><h2 id="声明文件"><a href="#声明文件" class="headerlink" title="声明文件"></a>声明文件</h2><p>TypeScript编译器只能从TypeScript代码文件里获取类型信息。在TypeScript中引用JavaScript文件，需要通过<strong>声明文件</strong>（通常我们会把声明语句放到一个单独的文件中，以<code>.d.ts</code>为后缀），声明文件描述JavaScript模块内所有导出接口的类型信息</p><blockquote><ul><li><strong>声明语句仅仅用于编译时，在编译结果中不会存在</strong>，所以用ts写的模块仍然是用js发布。因此需要有<code>.d.ts</code>文件标记模块里的对象类型，供其他ts使用者调用</li><li>声明语句只定义类型，如<code>declare const jQuery: (selector: string) =&gt; any;</code>，禁止定义具体的实现，如<code>declare const jQuery = function(selector) {}</code>是不被允许的</li><li><strong>推荐使用<code>@types</code>管理第三方库的声明</strong></li></ul></blockquote><h3 id="全局变量声明"><a href="#全局变量声明" class="headerlink" title="全局变量声明"></a>全局变量声明</h3><p>引用非模块化的JavaScript文件，通过<code>&lt;script&gt;</code>标签引入第三方库，注入全局变量，比如jQuery.js</p><blockquote><ul><li>全局变量声明文件只需要放在项目目录下，ts编辑器会解析项目中所有<code>.ts</code>文件</li><li>在全局变量的声明文件中，是不允许出现<code>import</code>，<code>export</code>关键字的。一旦出现了，那么他就会被视为一个npm包或UMD库</li></ul></blockquote><table><thead><tr><th>声明语句</th><th>作用</th></tr></thead><tbody><tr><td><code>declare var</code>/<code>declare let</code></td><td>声明全局变量</td></tr><tr><td><code>declare const</code></td><td>声明全局常量</td></tr><tr><td><code>declare function</code></td><td>声明全局方法，函数重载也支持</td></tr><tr><td><code>declare class</code></td><td>声明全局类</td></tr><tr><td><code>declare enum</code></td><td>声明全局枚举类型</td></tr><tr><td><code>declare namespace</code></td><td>声明全局对象（含有多个子属性的）</td></tr></tbody></table><ul><li><p><code>declare namespace</code>内部使用<code>function</code>、<code>const</code>、<code>class</code>、<code>enum</code>等语句定义类型</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/jQuery.d.ts</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> jQuery &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">url: <span class="built_in">string</span>, settings?: <span class="built_in">any</span></span>): <span class="title">void</span></span>;</span><br><span class="line">    <span class="keyword">const</span> version: <span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">class</span> Event &#123;</span><br><span class="line">        blur(eventType: EventType): <span class="built_in">void</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">enum</span> EventType &#123;</span><br><span class="line">        CustomClick</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// src/index.ts</span></span><br><span class="line">jQuery.ajax(<span class="string">'/api/get_something'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(jQuery.version);</span><br><span class="line"><span class="keyword">const</span> e = <span class="keyword">new</span> jQuery.Event();</span><br><span class="line">e.blur(jQuery.EventType.CustomClick);</span><br></pre></td></tr></table></figure></li><li><p>对象拥有深层的层级，则需要用嵌套的<code>namespace</code>来声明深层的属性的类型</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/jQuery.d.ts</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> jQuery &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">url: <span class="built_in">string</span>, settings?: <span class="built_in">any</span></span>): <span class="title">void</span></span>;</span><br><span class="line">    <span class="keyword">namespace</span> fn &#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">object: <span class="built_in">any</span></span>): <span class="title">void</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// src/index.ts</span></span><br><span class="line">jQuery.ajax(<span class="string">'/api/get_something'</span>);</span><br><span class="line">jQuery.fn.extend(&#123;</span><br><span class="line">    check: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.checked = <span class="literal">true</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>声明合并。假如jQuery既是一个函数，又是一个对象，拥有子属性。可以组合多个声明语句，它们会不冲突的合并起来</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/jQuery.d.ts</span></span><br><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">jQuery</span>(<span class="params">selector: <span class="built_in">string</span></span>): <span class="title">any</span></span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> jQuery &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">url: <span class="built_in">string</span>, settings?: <span class="built_in">any</span></span>): <span class="title">void</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// src/index.ts</span></span><br><span class="line">jQuery(<span class="string">'#foo'</span>);</span><br><span class="line">jQuery.ajax(<span class="string">'/api/get_something'</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="全局类型声明"><a href="#全局类型声明" class="headerlink" title="全局类型声明"></a>全局类型声明</h3><table><thead><tr><th>声明语句</th><th>作用</th></tr></thead><tbody><tr><td><code>interface</code>和<code>type</code></td><td>声明全局类型</td></tr></tbody></table><ul><li><p><code>interface</code>和<code>type</code>，声明全局接口或类型</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/jQuery.d.ts</span></span><br><span class="line"><span class="keyword">interface</span> AjaxSettings &#123;</span><br><span class="line">    method?: <span class="string">'GET'</span> | <span class="string">'POST'</span></span><br><span class="line">    data?: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> jQuery &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">url: <span class="built_in">string</span>, settings?: AjaxSettings</span>): <span class="title">void</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// src/index.ts</span></span><br><span class="line"><span class="keyword">let</span> settings: AjaxSettings = &#123;</span><br><span class="line">    method: <span class="string">'POST'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        name: <span class="string">'foo'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">jQuery.ajax(<span class="string">'/api/post_something'</span>, settings);</span><br></pre></td></tr></table></figure></li><li><p>防止命名冲突，我们应该尽可能的减少全局变量或全局类型的数量，最好将他们放入<code>namespace</code></p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/jQuery.d.ts</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> jQuery &#123;</span><br><span class="line">    <span class="keyword">interface</span> AjaxSettings &#123;</span><br><span class="line">        method?: <span class="string">'GET'</span> | <span class="string">'POST'</span></span><br><span class="line">        data?: <span class="built_in">any</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">url: <span class="built_in">string</span>, settings?: AjaxSettings</span>): <span class="title">void</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// src/index.ts</span></span><br><span class="line"><span class="comment">// 使用接口时，加上前缀</span></span><br><span class="line"><span class="keyword">let</span> settings: jQuery.AjaxSettings = &#123;</span><br><span class="line">    method: <span class="string">'POST'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        name: <span class="string">'foo'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="npm包的声明文件"><a href="#npm包的声明文件" class="headerlink" title="npm包的声明文件"></a>npm包的声明文件</h3><p>通过<code>import foo from &#39;foo&#39;</code>导入，符合ES6模块规范。</p><ul><li>npm包的声明文件可能存在于两个地方：<ul><li><code>package.json</code>中,有<code>types</code>字段或者有<code>index.d.ts</code>声明文件。这种模式不需要额外安装其他包，最为推荐的</li><li>发布到<code>@types</code>里。只需要尝试安装对应的@types包<code>npm install @types/foo --save-dev</code>，不需要其他配置。这种模式一般由于npm包的维护者没有提供声明文件，由其他人将声明文件发布</li></ul></li><li>自己为npm包写声明文件<ul><li>创建<code>types</code>目录，管理自己的声明文件</li><li>将声明文件放在<code>types/npm包名/index.d.ts</code></li><li>配置<code>tsconfig.json</code>中的<code>paths</code>和<code>baseUrl</code>字段。，<code>import</code>导入时，也会去<code>types</code>目录下寻找对应模块的声明文件<br><img src="/2019/06/28/Typescript/Typescript-20190701-16-15-10.png" alt="配置tsconfig.json"><blockquote><p>module 配置可以有很多种选项，不同的选项会影响模块的导入导出模式</p></blockquote></li></ul></li></ul><table><thead><tr><th>声明语句</th><th>作用</th></tr></thead><tbody><tr><td><code>export</code></td><td>导出变量</td></tr><tr><td><code>export const</code></td><td>导出常量</td></tr><tr><td><code>export function</code></td><td>导出方法</td></tr><tr><td><code>export class</code></td><td>导出类</td></tr><tr><td><code>export enum</code></td><td>导出枚举类型</td></tr><tr><td><code>export namespace</code></td><td>导出对象（含有多个子属性的）</td></tr><tr><td><code>export interface</code>和<code>export type</code></td><td>导出类型</td></tr><tr><td><code>export default</code></td><td>导出默认值的类型</td></tr><tr><td><code>export =</code></td><td>commonjs规范中导出</td></tr></tbody></table><ul><li><p>在npm包的声明文件中，<code>declare</code>声明的是局部变量而不是全局变量。需要用<code>export</code>导出，在调用时用<code>import</code>导入后</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出1</span></span><br><span class="line"><span class="comment">// types/foo/index.d.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name: <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>): <span class="title">string</span></span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>);</span><br><span class="line">    sayHi(<span class="params"></span>): string;</span><br><span class="line">&#125;</span><br><span class="line">// src/index.ts</span><br><span class="line">import &#123; name, getName, Animal, Directions, Options &#125; <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出2</span></span><br><span class="line"><span class="comment">// types/foo/index.d.ts</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> name: <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>): <span class="title">string</span></span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>);</span><br><span class="line">    sayHi(<span class="params"></span>): string;</span><br><span class="line">&#125;</span><br><span class="line">export &#123; name, getName, Animal&#125;;</span><br><span class="line"><span class="comment">// src/index.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; name, getName, Animal, Directions, Options &#125; <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br></pre></td></tr></table></figure></li><li><p>导出默认值类型<code>export default</code>，只有<code>function</code>、<code>class</code>和<code>interface</code>可以直接默认导出，其他需要先定义再默认导出</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// types/foo/index.d.ts</span></span><br><span class="line"><span class="comment">//通过</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>): <span class="title">string</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Directions;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">enum</span> Directions &#123;</span><br><span class="line">    Up,</span><br><span class="line">    Down,</span><br><span class="line">    Left,</span><br><span class="line">    Right</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">enum</span> Directions &#123;</span><br><span class="line">    Up,</span><br><span class="line">    Down,</span><br><span class="line">    Left,</span><br><span class="line">    Right</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>commonjs规范中导出<code>export =</code>，不能单个导出</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// types/foo/index.d.ts</span></span><br><span class="line"><span class="keyword">export</span> = foo;</span><br><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>): <span class="title">string</span></span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> foo &#123;</span><br><span class="line">    <span class="keyword">const</span> bar: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="UMD库的声明文件"><a href="#UMD库的声明文件" class="headerlink" title="UMD库的声明文件"></a>UMD库的声明文件</h3><p>既可以通过<code>&lt;script&gt;</code>标签引入，又可以通过<code>import</code>导入</p><table><thead><tr><th>声明语句</th><th>作用</th></tr></thead><tbody><tr><td><code>export as namespace</code></td><td>UMD 库声明全局变量</td></tr></tbody></table><p>基于npm包声明文件，添加一条<code>export as namespace</code>语句</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// types/foo/index.d.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">as</span> <span class="keyword">namespace</span> foo;</span><br><span class="line"><span class="keyword">export</span> = foo;</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="comment">// export as namespace foo;</span></span><br><span class="line"><span class="comment">// export default foo;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>): <span class="title">string</span></span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> foo &#123;</span><br><span class="line">    <span class="keyword">const</span> bar: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扩展全局变量"><a href="#扩展全局变量" class="headerlink" title="扩展全局变量"></a>扩展全局变量</h3><p>第三方库扩展了一个全局变量，却没有相应的更新类型，就会导致 ts 编译错误，此时就需要扩展全局变量的类型</p><ul><li><p>直接扩展全局变量</p><ul><li><p>通过声明合并，使用<code>interface</code>，扩展全局变量的类型</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> String&#123;</span><br><span class="line">    prependHello():<span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">'foo'</span>.prependHello();</span><br></pre></td></tr></table></figure></li><li><p>使用<code>declare namespace</code>，给已有的命名空间添加类型声明</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// types/jquery-plugin/index.d.ts</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> JQuery &#123;</span><br><span class="line">    <span class="keyword">interface</span> CustomOptions &#123;</span><br><span class="line">        bar: <span class="built_in">string</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> JQueryStatic &#123;</span><br><span class="line">    foo(options: JQuery.CustomOptions): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// src/index.ts</span></span><br><span class="line">jQuery.foo(&#123;</span><br><span class="line">    bar: <span class="string">''</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>在npm包或UMD库的声明文件中扩展全局变量，要使用<code>declare global</code>，因为只有<code>export</code>导出的类型声明才被导入</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// types/foo/index.d.ts</span></span><br><span class="line"><span class="keyword">declare</span> global &#123;</span><br><span class="line">    <span class="keyword">interface</span> String &#123;</span><br><span class="line">        prependHello(): <span class="built_in">string</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// src/index.ts</span></span><br><span class="line"><span class="string">'bar'</span>.prependHello();</span><br></pre></td></tr></table></figure><blockquote><p>即使此声明文件不需要导出任何东西，仍然需要导出一个空对象，用来告诉编译器这是一个模块的声明文件，而不是一个全局变量的声明文件。</p></blockquote></li></ul><h3 id="模块插件的声明文件处理"><a href="#模块插件的声明文件处理" class="headerlink" title="模块插件的声明文件处理"></a>模块插件的声明文件处理</h3><p>导入模块插件后，可能改变对应模块的结构。如果原有模块已经有了类型声明文件，而插件模块没有类型声明文件，会导致类型不完整，需要扩展原有模块的类型</p><ul><li><p>需要在类型声明文件中先引用原有模块，再使用<code>declare module</code>扩展原有模块</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// types/moment-plugin/index.d.ts</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> moment <span class="keyword">from</span> <span class="string">'moment'</span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">module</span> 'moment' &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>): <span class="title">moment</span>.<span class="title">CalendarKey</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// src/index.ts</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> moment <span class="keyword">from</span> <span class="string">'moment'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'moment-plugin'</span>;</span><br><span class="line">moment.foo();</span><br></pre></td></tr></table></figure></li><li><p><code>declare module</code>也可用于在一个文件中一次性声明多个模块的类型</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// types/foo-bar.d.ts</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">module</span> 'foo' &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> Foo &#123;</span><br><span class="line">        foo: <span class="built_in">string</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">module</span> 'bar' &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>): <span class="title">string</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// src/index.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Foo &#125; <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> bar <span class="keyword">from</span> <span class="string">'bar'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f: Foo;</span><br><span class="line">bar.bar();</span><br></pre></td></tr></table></figure></li></ul><h3 id="声明文件中的依赖"><a href="#声明文件中的依赖" class="headerlink" title="声明文件中的依赖"></a>声明文件中的依赖</h3><p>一个声明文件有时会依赖另一个声明文件</p><ul><li><p>通过<code>import</code>导入另一个声明文件</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// types/moment-plugin/index.d.ts</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> moment <span class="keyword">from</span> <span class="string">'moment'</span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">module</span> 'moment' &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>): <span class="title">moment</span>.<span class="title">CalendarKey</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>/// &lt;reference /&gt;</code>三斜线指令（<strong>必须放在文件的最顶端，前面只能有注释</strong>），导入另一个声明文件</p><ul><li><code>/// &lt;reference typrs=&quot;jquery&quot;/&gt;</code>, 用于声明对另一个<strong>库</strong>的依赖</li><li><code>/// &lt;reference path=&quot;jquery.d.ts&quot;/&gt;</code>, 用于声明对另一个<strong>文件</strong>的依赖</li><li><p><strong>一般建议使用<code>import</code>，只有以下几种情况，不能使用<code>import</code>，需要三斜线指令</strong></p><ul><li><p>当在一个全局变量的声明文件中</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// types/jquery-plugin/index.d.ts</span></span><br><span class="line"><span class="comment">/// &lt;reference types="jquery" /&gt;</span></span><br><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">options: JQuery.AjaxSettings</span>): <span class="title">string</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// src/index.ts</span></span><br><span class="line">foo(&#123;&#125;);</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><pre><code>- 当需要依赖一个全局变量的声明文件时    <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// types/node-plugin/index.d.ts</span></span><br><span class="line"><span class="comment">/// &lt;reference types="node" /&gt;</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">p: NodeJS.Process</span>): <span class="title">string</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// src/index.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="string">'node-plugin'</span>;</span><br><span class="line">foo(global.process);</span><br></pre></td></tr></table></figure></code></pre><h3 id="自动生成声明文件"><a href="#自动生成声明文件" class="headerlink" title="自动生成声明文件"></a>自动生成声明文件</h3><p>如果库的源码本身就是由ts写的，那么在使用<code>tsc</code>脚本将ts编译为js时，添加 <code>declaration</code>选项，就可以同时自动为每个ts文件生成对应的<code>.d.ts</code>声明文件。</p><ul><li>在命令行中添加，<code>tsc *.ts --declaration</code></li><li><p>在<code>tsconfig.json</code>中添加，<code>declaration</code>选项</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">        <span class="attr">"module"</span>: <span class="string">"commonjs"</span>,</span><br><span class="line">        <span class="attr">"outDir"</span>: <span class="string">"lib"</span>,</span><br><span class="line">        <span class="attr">"declaration"</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><code>tsconfig.json``compilerOptions</code>选项中，其他关于自动生成声明文件的选项</p><ul><li><code>outDir</code>，设置ts文件编译结果输出目录</li><li><code>declarationDir</code>：设置生成<code>.d.ts</code>文件的目录</li><li><code>declarationMap</code>： 对每个<code>.d.ts</code>文件，都生成对应的<code>.d.ts.map</code>（sourcemap）文件</li><li><code>emitDeclarationOnly</code>：仅生成<code>.d.ts</code>文件，不生成<code>.js</code>文件</li></ul></blockquote><h3 id="发布声明文件"><a href="#发布声明文件" class="headerlink" title="发布声明文件"></a>发布声明文件</h3><ul><li>将声明文件和源码放在一起，推荐做法<ul><li>如果自动生成声明文件，就不需要做其他配置，只需要把编译好的文件也发布到npm上</li><li>如果是手动写的声明文件，还需要满足以下条件之一<ul><li>给<code>package.json</code>中的<code>types</code>或<code>typings</code>字段指定一个类型声明文件地址</li><li>在项目根目录下，编写一个<code>index.d.ts</code>文件。如果没有指定<code>types</code>或<code>typings</code>，就会寻找它作为此库的类型声明文件</li><li>针对入口文件（<code>package.json</code>中的<code>main</code>字段指定的入口文件），编写一个同名不同后缀的<code>.d.ts</code>文件。如果没有找到<code>index.d.ts</code>文件，就会寻找它作为此库的类型声明文件</li></ul></li></ul></li><li>将声明文件发布到<code>@types</code>下</li></ul><h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><p>JavaScript中有很多内置对象，它们可以直接在TypeScript中当做定义好了的类型。</p><ul><li><p>ES的内置象，<code>Boolean</code>、<code>Error</code>、<code>Date</code>、<code>RegExp</code>等</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// boolean类型和Boolean类型不等价</span></span><br><span class="line"><span class="keyword">let</span> b: <span class="built_in">Boolean</span> = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> e: <span class="built_in">Error</span> = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Error occurred'</span>);</span><br><span class="line"><span class="keyword">let</span> d: <span class="built_in">Date</span> = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> r: <span class="built_in">RegExp</span> = <span class="regexp">/[a-z]/</span>;</span><br></pre></td></tr></table></figure></li><li><p>DOM和BOM的内置对象，<code>Document</code>、<code>HTMLElement</code>、<code>Event</code>、<code>NodeList</code>等</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> body: HTMLElement = <span class="built_in">document</span>.body;</span><br><span class="line"><span class="keyword">let</span> allDiv: NodeList = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>);</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e: MouseEvent</span>) </span>&#123;</span><br><span class="line"><span class="comment">// Do something</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="TypeScript核心库的定义文件"><a href="#TypeScript核心库的定义文件" class="headerlink" title="TypeScript核心库的定义文件"></a>TypeScript核心库的定义文件</h3><p>TypeScript 核心库的定义文件中定义了所有浏览器环境需要用到的类型，并且是预置在 TypeScript 中的。但<strong>不包含Node.js部分</strong>，需要引入第三方声明文件<code>npm install @types/node --save-dev</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;TypeScript 是微软开发的JavaScript的超集，主要在JavaScript的基础上添加了可选的静态类型和基于类的面向对象编程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开源于 GitHub&lt;/li&gt;
&lt;li&gt;可以编译成纯 JavaScript&lt;/li&gt;
&lt;li&gt;TypeScript 编译工具可以运行在任何服务器和任何系统上&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="Typescript" scheme="http://yoursite.com/categories/Typescript/"/>
    
    
      <category term="Typescript" scheme="http://yoursite.com/tags/Typescript/"/>
    
  </entry>
  
</feed>
